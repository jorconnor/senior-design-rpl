{"py.functions":{"text":"import sys, rsa_key_generator as rkg, os\n\nDEFAULT_BLOCK_SIZE = 128\nBYTE_SIZE = 256\n\ndef main():\n    filename = 'encrypted_file.txt'\n    response = input('Encrypte\\Decrypt [e\\d]: ')\n\n    if response.lower().startswith('e'):\n        mode = 'encrypt'\n    elif response.lower().startswith('d'):\n        mode = 'decrypt'\n\n    if mode == 'encrypt':\n        if not os.path.exists('rsa_pubkey.txt'):\n            rkg.makeKeyFiles('rsa', 1024)\n            \n        message = input('\\nEnter message: ')\n        pubKeyFilename = 'rsa_pubkey.txt'\n        print('Encrypting and writing to %s...' % (filename))\n        encryptedText = encryptAndWriteToFile(filename, pubKeyFilename, message)\n\n        print('\\nEncrypted text:')\n        print(encryptedText)\n\n    elif mode == 'decrypt':\n        privKeyFilename = 'rsa_privkey.txt'\n        print('Reading from %s and decrypting...' % (filename))\n        decryptedText = readFromFileAndDecrypt(filename, privKeyFilename)\n        print('writing decryption to rsa_decryption.txt...')\n        with open('rsa_decryption.txt', 'w') as dec:\n            dec.write(decryptedText)\n\n        print('\\nDecryption:')\n        print(decryptedText)\n\n\ndef getBlocksFromText(message, blockSize=DEFAULT_BLOCK_SIZE):\n    messageBytes = message.encode('ascii')\n\n    blockInts = []\n    for blockStart in range(0, len(messageBytes), blockSize):\n        blockInt = 0\n        for i in range(blockStart, min(blockStart + blockSize, len(messageBytes))):\n            blockInt += messageBytes[i] * (BYTE_SIZE ** (i % blockSize))\n        blockInts.append(blockInt)\n    return blockInts\n\n\ndef getTextFromBlocks(blockInts, messageLength, blockSize=DEFAULT_BLOCK_SIZE):\n    message = []\n    for blockInt in blockInts:\n        blockMessage = []\n        for i in range(blockSize - 1, -1, -1):\n            if len(message) + i < messageLength:\n                asciiNumber = blockInt \/\/ (BYTE_SIZE ** i)\n                blockInt = blockInt % (BYTE_SIZE ** i)\n                blockMessage.insert(0, chr(asciiNumber))\n        message.extend(blockMessage)\n    return ''.join(message)\n\n\ndef encryptMessage(message, key, blockSize=DEFAULT_BLOCK_SIZE):\n    encryptedBlocks = []\n    n, e = key\n\n    for block in getBlocksFromText(message, blockSize):\n        encryptedBlocks.append(pow(block, e, n))\n    return encryptedBlocks\n\n\ndef decryptMessage(encryptedBlocks, messageLength, key, blockSize=DEFAULT_BLOCK_SIZE):\n    decryptedBlocks = []\n    n, d = key\n    for block in encryptedBlocks:\n        decryptedBlocks.append(pow(block, d, n))\n    return getTextFromBlocks(decryptedBlocks, messageLength, blockSize)\n\n\ndef readKeyFile(keyFilename):\n    fo = open(keyFilename)\n    content = fo.read()\n    fo.close()\n    keySize, n, EorD = content.split(',')\n    return (int(keySize), int(n), int(EorD))\n\n\ndef encryptAndWriteToFile(messageFilename, keyFilename, message, blockSize=DEFAULT_BLOCK_SIZE):\n    keySize, n, e = readKeyFile(keyFilename)\n    if keySize < blockSize * 8:\n        sys.exit('ERROR: Block size is %s bits and key size is %s bits. The RSA cipher requires the block size to be equal to or greater than the key size. Either decrease the block size or use different keys.' % (blockSize * 8, keySize))\n\n    encryptedBlocks = encryptMessage(message, (n, e), blockSize)\n\n    for i in range(len(encryptedBlocks)):\n        encryptedBlocks[i] = str(encryptedBlocks[i])\n    encryptedContent = ','.join(encryptedBlocks)\n    encryptedContent = '%s_%s_%s' % (len(message), blockSize, encryptedContent)\n    fo = open(messageFilename, 'w')\n    fo.write(encryptedContent)\n    fo.close()\n    return encryptedContent\n\n\ndef readFromFileAndDecrypt(messageFilename, keyFilename):","subs":[{"py.function":{"text":"def main():","subs":[{"py.function_name":{"text":"main","pos":89}},{"py.paramaters":{"text":"","pos":94}}],"pos":85}},{"py.function":{"text":"def getBlocksFromText(message, blockSize=DEFAULT_BLOCK_SIZE):","subs":[{"py.function_name":{"text":"getBlocksFromText","pos":1172}},{"py.paramaters":{"text":"message, blockSize=DEFAULT_BLOCK_SIZE","pos":1190}}],"pos":1168}},{"py.function":{"text":"def getTextFromBlocks(blockInts, messageLength, blockSize=DEFAULT_BLOCK_SIZE):","subs":[{"py.function_name":{"text":"getTextFromBlocks","pos":1595}},{"py.paramaters":{"text":"blockInts, messageLength, blockSize=DEFAULT_BLOCK_SIZE","pos":1613}}],"pos":1591}},{"py.function":{"text":"def encryptMessage(message, key, blockSize=DEFAULT_BLOCK_SIZE):","subs":[{"py.function_name":{"text":"encryptMessage","pos":2082}},{"py.paramaters":{"text":"message, key, blockSize=DEFAULT_BLOCK_SIZE","pos":2097}}],"pos":2078}},{"py.function":{"text":"def decryptMessage(encryptedBlocks, messageLength, key, blockSize=DEFAULT_BLOCK_SIZE):","subs":[{"py.function_name":{"text":"decryptMessage","pos":2321}},{"py.paramaters":{"text":"encryptedBlocks, messageLength, key, blockSize=DEFAULT_BLOCK_SIZE","pos":2336}}],"pos":2317}},{"py.function":{"text":"def readKeyFile(keyFilename):","subs":[{"py.function_name":{"text":"readKeyFile","pos":2605}},{"py.paramaters":{"text":"keyFilename","pos":2617}}],"pos":2601}},{"py.function":{"text":"def encryptAndWriteToFile(messageFilename, keyFilename, message, blockSize=DEFAULT_BLOCK_SIZE):","subs":[{"py.function_name":{"text":"encryptAndWriteToFile","pos":2790}},{"py.paramaters":{"text":"messageFilename, keyFilename, message, blockSize=DEFAULT_BLOCK_SIZE","pos":2812}}],"pos":2786}},{"py.function":{"text":"def readFromFileAndDecrypt(messageFilename, keyFilename):","subs":[{"py.function_name":{"text":"readFromFileAndDecrypt","pos":3605}},{"py.paramaters":{"text":"messageFilename, keyFilename","pos":3628}}],"pos":3601}}],"pos":1}}
