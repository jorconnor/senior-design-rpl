{
    "c.line_comments": {
        "text": "#include <curses.h>\r\n#include <stdlib.h>\r\n\r\n#define STARTX 9\r\n#define STARTY 3\r\n#define WIDTH  6\r\n#define HEIGHT 4\r\n\r\n#define TRACE_VALUE TRACE_MAXIMUM\r\n\r\nvoid board(\tWINDOW *win, int starty, int startx, int lines, int cols,\r\n\t\tint tile_width, int tile_height);\r\nvoid magic(int **, int);\r\nvoid print(int **, int);\r\nvoid magic_board(int **a,int n);\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\r\n\tint **a,n,i;\r\n\r\n\tif(argc != 2)\r\n\t{\tprintf(\"Usage: %s <magic square order>\\n\", argv[0]);\r\n\t\texit(0);\r\n\t}\r\n\tn = atoi(argv[1]);\r\n\tif(n % 2 == 0)\r\n\t{\tprintf(\"Sorry !!! I don't know how to create magic square of even order\\n\");\r\n\t\tprintf(\"The order should be an odd number\\n\");\r\n\t\texit(0);\r\n\t}\r\n\ta = (int **) malloc(n * sizeof(int*));\r\n\tfor(i = 0;i < n;++i)\r\n\t\ta[i] = (int *)malloc(n * sizeof(int));\r\n\r\n\tmagic(a,n);\r\n\r\n\tinitscr();\r\n\tcurs_set(0);\r\n\tnoecho();\r\n\tmagic_board(a,n);\r\n\tgetch();\r\n\tendwin();\r\n\r\n\treturn;\r\n}\r\n\r\nvoid magic(int **a, int n)\r\n{\r\n\tint i,j,k;\r\n\tint row,col;\r\n\tfor(i = 0;i < n;++i)\r\n\t\tfor(j = 0;j < n;++j)\r\n\t\t\ta[i][j] = -1;\r\n\trow = 0;\r\n\tcol = n / 2;\r\n\r\n\tk = 1;\r\n\ta[row][col] = k;\r\n\r\n\twhile(k != n * n)\r\n\t{\r\n\t\tif(row == 0 && col != n - 1)\r\n\t\t{\trow = n - 1;\r\n\t\t\tcol ++;\r\n\t\t\ta[row][col] = ++k;\r\n\t\t}\r\n\t\telse if(row != 0 && col != n - 1)\r\n\t\t{\tif(a[row - 1][col + 1] == -1)\r\n\t\t\t{\trow --;\r\n\t\t\t\tcol ++;\r\n\t\t\t\ta[row][col] = ++k;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\trow ++;\r\n\t\t\t\ta[row][col] = ++k;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(row != 0 && col == n - 1)\r\n\t\t{\r\n\t\t\trow --;\r\n\t\t\tcol = 0;\r\n\t\t\ta[row][col] = ++k;\r\n\t\t}\r\n\t\telse if(row == 0 && col == n - 1)\r\n\t\t{\trow ++;\r\n\t\t\ta[row][col] = ++k;\r\n\t\t}\r\n\r\n\t}\r\n\treturn;\r\n}\r\n\r\nvoid print(int **a,int n)\r\n{\tint i,j;\r\n\tint x,y;\r\n\tx = STARTX;\r\n\ty = STARTY;\r\n\tmvprintw(1,30,\"MAGIC SQUARE\");\r\n\tfor(i = 0;i < n;++i)\r\n\t{\tfor(j = 0;j < n;++j)\r\n\t\t{\tmvprintw(y,x,\"%d\",a[i][j]);\r\n\t\t\tif(n > 9)\r\n\t\t\t\tx += 4;\r\n\t\t\telse\r\n\t\t\t\tx += 6;\r\n\t\t}\r\n\t\tx = STARTX;\r\n\t\tif(n > 7)\r\n\t\t\ty += 2;\r\n\t\telse\r\n\t\t\ty += 3;\r\n\t}\r\n\trefresh();\r\n}\r\nvoid board(WINDOW *win, int starty, int startx, int lines, int cols,\r\n\t   int tile_width, int tile_height)\r\n{\tint endy, endx, i, j;\r\n\r\n\tendy = starty + lines * tile_height;\r\n\tendx = startx + cols  * tile_width;\r\n\r\n\tfor(j = starty; j <= endy; j += tile_height)\r\n\t\tfor(i = startx; i <= endx; ++i)\r\n\t\t\tmvwaddch(win, j, i, ACS_HLINE);\r\n\tfor(i = startx; i <= endx; i += tile_width)\r\n\t\tfor(j = starty; j <= endy; ++j)\r\n\t\t\tmvwaddch(win, j, i, ACS_VLINE);\r\n\tmvwaddch(win, starty, startx, ACS_ULCORNER);\r\n\tmvwaddch(win, endy, startx, ACS_LLCORNER);\r\n\tmvwaddch(win, starty, endx, ACS_URCORNER);\r\n\tmvwaddch(win, \tendy, endx, ACS_LRCORNER);\r\n\tfor(j = starty + tile_height; j <= endy - tile_height; j += tile_height)\r\n\t{\tmvwaddch(win, j, startx, ACS_LTEE);\r\n\t\tmvwaddch(win, j, endx, ACS_RTEE);\r\n\t\tfor(i = startx + tile_width; i <= endx - tile_width; i += tile_width)\r\n\t\t\tmvwaddch(win, j, i, ACS_PLUS);\r\n\t}\r\n\tfor(i = startx + tile_width; i <= endx - tile_width; i += tile_width)\r\n\t{\tmvwaddch(win, starty, i, ACS_TTEE);\r\n\t\tmvwaddch(win, endy, i, ACS_BTEE);\r\n\t}\r\n\twrefresh(win);\r\n}\r\n\r\nvoid magic_board(int **a,int n)\r\n{\tint i,j, deltax, deltay;\r\n\tint startx, starty;\r\n\r\n\tstarty = (LINES - n * HEIGHT) / 2;\r\n\tstartx = (COLS  - n * WIDTH) / 2;\r\n\tboard(stdscr, starty, startx, n, n, WIDTH, HEIGHT);\r\n\tdeltay = HEIGHT / 2;\r\n\tdeltax = WIDTH  / 2;\r\n\tfor(i = 0;i < n; ++i)\r\n\t\tfor(j = 0; j < n; ++j)\r\n\t\t\tmvprintw(starty + j * HEIGHT + deltay,\r\n\t\t\t\t startx + i * WIDTH  + deltax,\r\n\t\t\t\t \"%d\", a[i][j]);\r\n}\r\n",
        "pos": 1
    }
}
