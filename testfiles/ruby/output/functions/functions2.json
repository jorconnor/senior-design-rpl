{
    "rb.functions": {
        "text": "# Code sourced under MIT license from kovacs/sortable\r\n\r\nrequire File.dirname(__FILE__) + '/test_helper'\r\nActiveRecord::Base.establish_connection(:adapter => \"sqlite3\", :dbfile => \":memory:\")\r\n\r\ndef setup_sortable_db\r\n  old_stdout = $stdout\r\n\r\n  # AR keeps printing annoying schema statements\r\n  $stdout = StringIO.new\r\n\r\n  ActiveRecord::Base.logger\r\n  ActiveRecord::Schema.define(:version => 1) do\r\n    create_table :cablecar_users do |t|\r\n      t.column :username, :string\r\n      t.column :status, :string\r\n      t.column :contact_info_id, :integer\r\n    end\r\n\r\n    create_table :cablecar_contact_infos do |t|\r\n      t.column :name, :string\r\n      t.column :phone, :string\r\n    end\r\n  end\r\n\r\n  $stdout = old_stdout\r\nend\r\n\r\nsetup_sortable_db\r\n\r\nrequire File.dirname(__FILE__) + '/../example/controllers/cablecar/users_controller'\r\n\r\n# Re-raise errors caught by the controller.\r\nclass Cablecar::UsersController\r\n  def rescue_action(e) raise e end\r\nend\r\n\r\n\r\nclass UsersControllerTest < Test::Unit::TestCase\r\n\r\n  def teardown_db\r\n    ActiveRecord::Base.connection.tables.each do |table|\r\n      ActiveRecord::Base.connection.drop_table(table)\r\n    end\r\n  end\r\n\r\n  #fixtures :widgets\r\n\r\n  def setup\r\n    @controller = Cablecar::UsersController.new\r\n    @request    = ActionController::TestRequest.new\r\n    @response   = ActionController::TestResponse.new\r\n\r\n    30.times do |n|\r\n      c = Cablecar::ContactInfo.new(:name => \"name#{n}\")\r\n      c.user = Cablecar::User.new(:username => \"user#{n}\")\r\n      c.save!\r\n    end\r\n  end\r\n\r\n  def teardown\r\n    teardown_db\r\n  end\r\n\r\n  def test_should_show_paginated_table_using_default_action\r\n    get :index, :use_default => true\r\n    assert_equal 10, assigns(:objects).size\r\n\r\n    verify_sortable_table_html\r\n    verify_pagination_html\r\n  end\r\n\r\n  def test_should_show_paginated_table\r\n    get :index\r\n    assert_equal 10, assigns(:objects).size\r\n\r\n    verify_sortable_table_html\r\n    verify_pagination_html\r\n  end\r\n\r\n  def test_should_show_sorable_table_without_pagination\r\n    get :index, :no_pagination => true\r\n    assert_equal 10, assigns(:objects).size\r\n\r\n    verify_sortable_table_html\r\n    assert_select 'div.pagination', false\r\n  end\r\n\r\n  def test_should_show_paginated_table_with_overrides_and_related_columns\r\n    get :index, :complex_example => true\r\n    assert_equal 15, assigns(:objects).size\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td.sortdown', 'Name'\r\n        assert_select 'td.sortdown' do\r\n          assert_select 'a[href=/cablecar/users?sort=name]', 'Name'\r\n          assert_select 'a[title=Sort by this field]', 'Name'\r\n        end\r\n      end\r\n    end\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 15\r\n      verify_name_user_row_data(11, 22)\r\n    end\r\n    verify_pagination_html(2)\r\n  end\r\n\r\n  def test_should_sortdown_up_by_related_field\r\n    get :index, :sort => 'name', :complex_example => true\r\n    assert_equal 15, assigns(:objects).size\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td.sortup', 'Name'\r\n        assert_select 'td.sortup' do\r\n          assert_select 'a[href=/cablecar/users?sort=name_reverse]', 'Name'\r\n          assert_select 'a[title=Sort by this field]', 'Name'\r\n        end\r\n      end\r\n    end\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 15\r\n      verify_name_user_row_data(4, 10)\r\n      verify_name_user_row_data(23, 30)\r\n    end\r\n    verify_pagination_html(2)\r\n  end\r\n\r\n  def test_should_sortup_up_by_field_with_desc_default_sort\r\n    get :index, :sort => 'name_reverse', :complex_example => true\r\n    assert_equal 15, assigns(:objects).size\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td.sortdown', 'Name'\r\n        assert_select 'td.sortdown' do\r\n          assert_select 'a[href=/cablecar/users?sort=name]', 'Name'\r\n          assert_select 'a[title=Sort by this field]', 'Name'\r\n        end\r\n      end\r\n    end\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 15\r\n      verify_name_user_row_data(11, 22)\r\n    end\r\n    verify_pagination_html(2)\r\n  end\r\n\r\n  def test_should_sortup_up_by_field_with_asc_default_sort\r\n    get :index, :sort => 'status_reverse', :complex_example => true\r\n    assert_equal 15, assigns(:objects).size\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td.sortdown', 'Status'\r\n        assert_select 'td.sortdown' do\r\n          assert_select 'a[href=/cablecar/users?sort=status]', 'Status'\r\n          assert_select 'a[title=Sort by this field]', 'Status'\r\n        end\r\n      end\r\n    end\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 15\r\n      verify_name_user_row_data(1, 15)\r\n    end\r\n    verify_pagination_html(2)\r\n  end\r\n\r\n  def test_should_sortup_up_by_field_with_more_than_one_sort_param\r\n    get :index, :sort => 'username_reverse', :complex_example => true\r\n    assert_equal 15, assigns(:objects).size\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td.sortdown', 'Username'\r\n        assert_select 'td.sortdown' do\r\n          assert_select 'a[href=/cablecar/users?sort=username]', 'Username'\r\n          assert_select 'a[title=Sort by this field]', 'Username'\r\n        end\r\n      end\r\n    end\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 15\r\n      verify_name_user_row_data(1, 15)\r\n    end\r\n    verify_pagination_html(2)\r\n  end\r\n\r\n  def test_should_fail_to_sort_with_invalid_sort_param\r\n    assert_raise Exception do |ex|\r\n      get :index, :sort => 'username_invalid', :complex_example => true\r\n    end\r\n  end\r\n\r\n  def test_should_override_class_defaults\r\n    Cablecar::UsersController.class_eval do\r\n      sortable_table Cablecar::User, {:include_relations => [:contact_info],\r\n                               :table_headings => [['Username', 'username'], ['Status', 'status'], ['Name', 'name']],\r\n                               :sort_map => {:username => [['cablecar_users.username', 'DESC'], ['cablecar_users.status', 'DESC']],\r\n                                             :status => ['cablecar_users.status', 'ASC'],\r\n                                             :name => ['cablecar_contact_infos.name', 'DESC']},\r\n                               :default_sort => ['name', 'ASC'],\r\n                               :per_page => 15}\r\n    end\r\n    get :index, :sort => 'name_reverse'\r\n    assert_equal 15, assigns(:objects).size\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td.sortdown', 'Name'\r\n        assert_select 'td.sortdown' do\r\n          assert_select 'a[href=/cablecar/users?sort=name]', 'Name'\r\n          assert_select 'a[title=Sort by this field]', 'Name'\r\n        end\r\n      end\r\n    end\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 15\r\n      verify_name_user_row_data(11, 22)\r\n    end\r\n    verify_pagination_html(2)\r\n\r\n    Cablecar::UsersController.class_eval do\r\n      sortable_table Cablecar::User # put things back where you found them\r\n    end\r\n  end\r\n\r\n  def verify_name_user_row_data(start, finish)\r\n    start.upto(finish) do |n|\r\n      assert_select \"tr#cablecar_user_#{n}\" do\r\n        assert_select 'td', :count => 3\r\n        assert_select 'td', {:minimum => 1}, \"name#{n}\" # test that the name value is there\r\n        assert_select 'td', {:minimum => 1}, \"user#{n}\"\r\n      end\r\n    end\r\n  end\r\n\r\n  def verify_sortable_table_html(count=10)\r\n    verify_sortable_table_header\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => count\r\n      30.downto(21) do |n|\r\n        assert_select \"tr#cablecar_user_#{n}\" do\r\n          assert_select 'td', :count => 4\r\n          assert_select 'td', {:minimum => 1}, n # test that the id value is there\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  def verify_sortable_table_header(href='/cablecar/users?sort=id_reverse')\r\n    assert_select 'thead' do\r\n      assert_select 'tr' do\r\n        assert_select 'td', :count => 4\r\n        assert_select 'td.sortup', 'Id'\r\n        assert_select 'td.sortup' do\r\n          assert_select \"a[href=#{href}]\", 'Id'\r\n          assert_select 'a[title=Sort by this field]', 'Id'\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  def verify_pagination_html(pages=3)\r\n    assert_select 'div.pagination' do\r\n      assert_select 'span', :count => 2\r\n      assert_select 'a', :count => pages\r\n    end\r\n  end\r\n\r\n  def test_truth\r\n    true\r\n  end\r\n\r\n  def test_should_search\r\n    get :index, :q => 'user3'\r\n    assert_equal 1, assigns(:objects).size\r\n\r\n    verify_sortable_table_header('/cablecar/users?q=user3&amp;sort=id_reverse')\r\n\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 1\r\n        assert_select \"tr#cablecar_user_4\" do\r\n          assert_select 'td', :count => 4\r\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\r\n        end\r\n    end\r\n  end\r\n\r\n  def test_should_search_and_return_multiple_results\r\n    get :index, :q => 'user4'\r\n    assert_equal 2, assigns(:objects).size\r\n\r\n    verify_sortable_table_header('/cablecar/users?q=user4&amp;sort=id_reverse')\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 2\r\n        assert_select \"tr#cablecar_user_5\" do\r\n          assert_select 'td', :count => 4\r\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\r\n        end\r\n    end\r\n\r\n  end\r\n\r\n  def create_a_dupe_user\r\n    c = Cablecar::ContactInfo.new(:name => \"dupe_name4\")\r\n    c.user = Cablecar::User.new(:username => \"dupe_user4\")\r\n    c.user.status = 'active'\r\n    c.save!\r\n  end\r\n\r\n  def test_should_search_and_filter_results\r\n    create_a_dupe_user\r\n    # This tests the ability to search as well as apply an additional filter that is used in conjunction with the\r\n    # search conditions\r\n    get :index, :q => 'user4', :active => 'true', :filter_example => true\r\n    assert_equal 1, assigns(:objects).size\r\n\r\n    verify_sortable_table_header('/cablecar/users?q=user4&amp;sort=id_reverse')\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 1\r\n        assert_select \"tr#cablecar_user_31\" do\r\n          assert_select 'td', :count => 4\r\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\r\n        end\r\n    end\r\n\r\n  end\r\n\r\n  def test_should_search_and_return_multiple_results\r\n    create_a_dupe_user\r\n\r\n    get :index, :q => 'user4'\r\n    assert_equal 2, assigns(:objects).size\r\n\r\n    verify_sortable_table_header('/cablecar/users?q=user4&amp;sort=id_reverse')\r\n    assert_select 'tbody' do\r\n      assert_select 'tr', :count => 2\r\n        assert_select \"tr#cablecar_user_5\" do\r\n          assert_select 'td', :count => 4\r\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\r\n        end\r\n    end\r\n\r\n  end\r\n\r\nend\r\n",
        "pos": 1
    }
}
