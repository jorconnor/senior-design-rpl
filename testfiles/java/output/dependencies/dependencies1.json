{"java.dependencies":{"pos":1,"subs":[{"java.package":{"pos":1,"subs":[{"java.package_text":{"pos":9,"text":"com.jsoniter"}}],"text":"package com.jsoniter"}},{"java.dependency":{"pos":24,"subs":[{"java.dependency_text":{"pos":31,"text":"com.jsoniter.spi.Decoder"}}],"text":"import com.jsoniter.spi.Decoder"}},{"java.dependency":{"pos":57,"subs":[{"java.dependency_text":{"pos":64,"text":"com.jsoniter.spi.JsoniterSpi"}}],"text":"import com.jsoniter.spi.JsoniterSpi"}},{"java.dependency":{"pos":94,"subs":[{"java.dependency_text":{"pos":101,"text":"com.jsoniter.spi.TypeLiteral"}}],"text":"import com.jsoniter.spi.TypeLiteral"}},{"java.dependency":{"pos":132,"subs":[{"java.dependency_text":{"pos":139,"text":"java.io.IOException"}}],"text":"import java.io.IOException"}},{"java.dependency":{"pos":160,"subs":[{"java.dependency_text":{"pos":167,"text":"java.lang.reflect.Array"}}],"text":"import java.lang.reflect.Array"}}],"text":"package com.jsoniter;\n\nimport com.jsoniter.spi.Decoder;\nimport com.jsoniter.spi.JsoniterSpi;\nimport com.jsoniter.spi.TypeLiteral;\n\nimport java.io.IOException;\nimport java.lang.reflect.Array;\n\nclass ReflectionArrayDecoder implements Decoder {\n\n    private final Class componentType;\n    private final Decoder compTypeDecoder;\n\n    public ReflectionArrayDecoder(Class clazz) {\n        componentType = clazz.getComponentType();\n        compTypeDecoder = Codegen.getDecoder(TypeLiteral.create(componentType).getDecoderCacheKey(), componentType);\n    }\n\n    @Override\n    public Object decode(JsonIterator iter) throws IOException {\n        CodegenAccess.resetExistingObject(iter);\n        if (iter.readNull()) {\n            return null;\n        }\n        if (!CodegenAccess.readArrayStart(iter)) {\n            return Array.newInstance(componentType, 0);\n        }\n        Object a1 = compTypeDecoder.decode(iter);\n        if (CodegenAccess.nextToken(iter) != ',') {\n            Object arr = Array.newInstance(componentType, 1);\n            Array.set(arr, 0, a1);\n            return arr;\n        }\n        Object a2 = compTypeDecoder.decode(iter);\n        if (CodegenAccess.nextToken(iter) != ',') {\n            Object arr = Array.newInstance(componentType, 2);\n            Array.set(arr, 0, a1);\n            Array.set(arr, 1, a2);\n            return arr;\n        }\n        Object a3 = compTypeDecoder.decode(iter);\n        if (CodegenAccess.nextToken(iter) != ',') {\n            Object arr = Array.newInstance(componentType, 3);\n            Array.set(arr, 0, a1);\n            Array.set(arr, 1, a2);\n            Array.set(arr, 2, a3);\n            return arr;\n        }\n        Object a4 = compTypeDecoder.decode(iter);\n        Object arr = Array.newInstance(componentType, 8);\n        Array.set(arr, 0, a1);\n        Array.set(arr, 1, a2);\n        Array.set(arr, 2, a3);\n        Array.set(arr, 3, a4);\n        int i = 4;\n        int arrLen = 8;\n        while (CodegenAccess.nextToken(iter) == ',') {\n            if (i == arrLen) {\n                Object newArr = Array.newInstance(componentType, 2 * arrLen);\n                System.arraycopy(arr, 0, newArr, 0, arrLen);\n                arr = newArr;\n                arrLen = 2 * arrLen;\n            }\n            Array.set(arr, i++, compTypeDecoder.decode(iter));\n        }\n        if (i == arrLen) {\n            return arr;\n        }\n        Object newArr = Array.newInstance(componentType, i);\n        System.arraycopy(arr, 0, newArr, 0, i);\n        return newArr;\n    }\n}\n"}}
