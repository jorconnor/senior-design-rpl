{
	"cpp.function": {
		"text": "\/*******************************************************************************\n *  Project: libopencad\n *  Purpose: OpenSource CAD formats support library\n *  Author: Alexandr Borzykh, mush3d at gmail.com\n *  Author: Dmitry Baryshnikov, bishop.dev@gmail.com\n *  Language: C++\n *******************************************************************************\n *  The MIT License (MIT)\n *\n *  Copyright (c) 2016 Alexandr Borzykh\n *  Copyright (c) 2016 NextGIS, <info@nextgis.com>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in all\n *  copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *  SOFTWARE.\n *******************************************************************************\/\n#include \"cadfile.h\"\n#include \"opencad_api.h\"\n\n#include <iostream>\n\nCADFile::CADFile( CADFileIO * poFileIO )\n{\n    pFileIO = poFileIO;\n}\n\nCADFile::~CADFile()\n{\n    if( nullptr != pFileIO )\n        delete pFileIO;\n}\n\nconst CADHeader& CADFile::getHeader() const\n{\n    return oHeader;\n}\n\nconst CADClasses& CADFile::getClasses() const\n{\n    return oClasses;\n}\n\nconst CADTables& CADFile::getTables() const\n{\n    return oTables;\n}\n\nint CADFile::ParseFile( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )\n{\n    if( nullptr == pFileIO )\n        return CADErrorCodes::FILE_OPEN_FAILED; \/\/ Comment\n\n    if( !pFileIO->IsOpened() )\n    {\n        if( !pFileIO->Open( CADFileIO::read | CADFileIO::binary ) )\n            return CADErrorCodes::FILE_OPEN_FAILED;\n    }\n\n    \/\/ Set flag which will tell CADLayer to skip\/not skip unsupported geoms\n    bReadingUnsupportedGeometries = bReadUnsupportedGeometries;\n\n    int nResultCode;\n    nResultCode = ReadSectionLocators();\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = ReadHeader( eOptions );\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = ReadClasses( eOptions );\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = CreateFileMap();\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = ReadTables( eOptions );\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n\n    return CADErrorCodes::SUCCESS;\n}\n\nint CADFile::ReadTables( CADFile::OpenOptions \/*eOptions*\/ )\n{\n    \/\/ TODO: read other tables in ALL option mode\n\n    int nResult = oTables.ReadTable( this, CADTables::LayersTable );\n\/\/    if(nResult != CADErrorCodes::SUCCESS)\n    return nResult;\n\n}\n\nsize_t CADFile::GetLayersCount() const\n{\n    return oTables.GetLayerCount();\n}\n\nCADLayer& CADFile::GetLayer( size_t index )\n{\n    return oTables.GetLayer( index );\n}\n\nbool CADFile::isReadingUnsupportedGeometries()\n{\n    return bReadingUnsupportedGeometries;\n}\n",
		"subs": [{
				"cpp.function_call": {
					"text": "\n\n#include <iostream>\n\nCADFile::CADFile( CADFileIO * poFileIO )\n",
					"subs": [{
							"cpp.return_type": {
								"text": "#include <iostream>",
								"pos": 1699
							}
						}, {
							"cpp.function_name": {
								"text": "CADFile::CADFile",
								"pos": 1720
							}
						}, {
							"cpp.parameters": {
								"text": "( CADFileIO * poFileIO )",
								"subs": [{
										"cpp.param": {
											"text": " CADFileIO * poFileIO ",
											"pos": 1737
										}
									}
								],
								"pos": 1736
							}
						}
					],
					"pos": 1697
				}
			}, {
				"cpp.function_body": {
					"text": "{\n    pFileIO = poFileIO;\n}",
					"pos": 1761
				}
			}, {
				"cpp.function_call": {
					"text": "\n}\n\nint CADFile::ParseFile( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )\n",
					"subs": [{
							"cpp.return_type": {
								"text": "}",
								"pos": 2075
							}
						}, {
							"cpp.function_name": {
								"text": "int CADFile::ParseFile",
								"pos": 2078
							}
						}, {
							"cpp.parameters": {
								"text": "( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )",
								"subs": [{
										"cpp.param": {
											"text": " enum OpenOptions eOptions",
											"pos": 2101
										}
									}, {
										"cpp.param": {
											"text": " bool bReadUnsupportedGeometries ",
											"pos": 2128
										}
									}
								],
								"pos": 2100
							}
						}
					],
					"pos": 2074
				}
			}, {
				"cpp.function_body": {
					"text": "{\n    if( nullptr == pFileIO )\n        return CADErrorCodes::FILE_OPEN_FAILED; \/\/ Comment\n\n    if( !pFileIO->IsOpened() )\n    {\n        if( !pFileIO->Open( CADFileIO::read | CADFileIO::binary ) )\n            return CADErrorCodes::FILE_OPEN_FAILED;\n    }",
					"pos": 2163
				}
			}, {
				"cpp.function_call": {
					"text": "\n}\n\nint CADFile::ReadTables( CADFile::OpenOptions \/*eOptions*\/ )\n",
					"subs": [{
							"cpp.return_type": {
								"text": "}",
								"pos": 3199
							}
						}, {
							"cpp.function_name": {
								"text": "int CADFile::ReadTables",
								"pos": 3202
							}
						}, {
							"cpp.parameters": {
								"text": "( CADFile::OpenOptions \/*eOptions*\/ )",
								"subs": [{
										"cpp.param": {
											"text": " CADFile::OpenOptions \/*eOptions*\/ ",
											"pos": 3226
										}
									}
								],
								"pos": 3225
							}
						}
					],
					"pos": 3198
				}
			}, {
				"cpp.function_body": {
					"text": "{\n    \/\/ TODO: read other tables in ALL option mode\n\n    int nResult = oTables.ReadTable( this, CADTables::LayersTable );\n\/\/    if(nResult != CADErrorCodes::SUCCESS)\n    return nResult;\n\n}",
					"pos": 3263
				}
			}, {
				"cpp.function_call": {
					"text": "\n}\n\nCADLayer& CADFile::GetLayer( size_t index )\n",
					"subs": [{
							"cpp.return_type": {
								"text": "}",
								"pos": 3530
							}
						}, {
							"cpp.function_name": {
								"text": "CADLayer& CADFile::GetLayer",
								"pos": 3533
							}
						}, {
							"cpp.parameters": {
								"text": "( size_t index )",
								"subs": [{
										"cpp.param": {
											"text": " size_t index ",
											"pos": 3561
										}
									}
								],
								"pos": 3560
							}
						}
					],
					"pos": 3529
				}
			}, {
				"cpp.function_body": {
					"text": "{\n    return oTables.GetLayer( index );\n}",
					"pos": 3577
				}
			}
		],
		"pos": 1
	}
}
