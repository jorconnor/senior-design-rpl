{"cpp.functions":{"pos":1,"text":"\/*M\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\n\/\/  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n\/\/\n\/\/  By downloading, copying, installing or using the software you agree to this license.\n\/\/  If you do not agree to this license, do not download, install,\n\/\/  copy or use the software.\n\/\/\n\/\/\n\/\/                           License Agreement\n\/\/\n\/\/ Copyright (C) 2012, Takuya MINAGAWA.\n\/\/ Third party copyrights are property of their respective owners.\n\/\/\n\/\/ Permission is hereby granted, free of charge, to any person obtaining a copy\n\/\/ of this software and associated documentation files (the \"Software\"), to deal\n\/\/ in the Software without restriction, including without limitation the rights to\n\/\/ use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies\n\/\/ of the Software, and to permit persons to whom the Software is furnished to do\n\/\/ so, subject to the following conditions:\n\/\/\n\/\/ The above copyright notice and this permission notice shall be included in all\n\/\/ copies or substantial portions of the Software.\n\/\/\n\/\/ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n\/\/ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n\/\/ PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\/\/ HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\/\/ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\/\/ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\/\/\n\/\/M*\/\n#include \"controlOR.h\"\n#include <opencv2\/nonfree\/nonfree.hpp>\n#include <sstream>\n\nusing namespace std;\nusing namespace cv;\nusing namespace cvar;\nusing namespace cvar::or;\n\/\/#include <iostream>\n\ncontrolOR::controlOR(void)\n{\n\/\/\tfeatureDetector = 0;\n\tdetectorType = \"SURF\";\n\tdescriptorType = \"SURF\";\n\tfeature_detector = 0;\n\tdescriptor_extractor = 0;\n\tinitializeFeatureDetector();\n\/\/\tvisual_words.setFeatureDimention(feature_dimention);\n\tvoteNum = 1;\n\tvisual_words.setVoteNum(voteNum);\n\timage_db.setVoteNum(voteNum);\n}\n\ncontrolOR::~controlOR(void)\n{\n\treleaseFeatureDetector();\n}\n\n\/\/\/\/\/\/\/ create visual word \/\/\/\/\/\/\/\nint controlOR::addFeaturesForVW(const Mat& src_img)\n{\n\tvector<KeyPoint> kp_vec;\n\/\/\tvector<float> desc_vec;\n\tcv::Mat desc_vec;\n\n\textractFeatures(src_img, kp_vec, desc_vec);\n\tvisual_words.addFeatures(desc_vec);\n\n\/\/\tkp_vec.clear();\n\/\/\tdesc_vec.clear();\n\n\treturn 0;\n}\n\n\nint controlOR::createVisualWords(int cluster_number)\n{\n\tvisual_words.createVW(cluster_number);\n\n\treturn 0;\n}\n\n\nint controlOR::registImage(const cv::Mat& src_img, int img_id)\n{\n\tvector<KeyPoint> kp_vec;\n\/\/\tvector<float> desc_vec;\n\tcv::Mat desc_vec;\n\n\tif(img_id <=0)\treturn -1;\n\n\ttry{\n\t\textractFeatures(src_img, kp_vec, desc_vec);\n\n\t\tvector<int> id_list;\n\t\tgetFeatureIdVec(desc_vec, id_list);\n\/\/\t\tvector<featureData> img_data;\n\/\/\t\tcalcFeatureData(kp_vec,desc_vec,img_id, img_data);\n\n\t\tint ret = image_db.registImageFeatures(img_id, src_img.size(), kp_vec, id_list);\n\n\t\tif(ret < 0)\n\t\t\treturn -1;\n\t}\n\tcatch(cv::Exception e){\n\t\tthrow e;\n\t}\n\tcatch(std::exception e2){\n\t\tthrow e2;\n\t}\n\n\treturn 0;\n}\n\n\nint controlOR::removeImage(int img_id)\n{\n\treturn image_db.removeImageId(img_id);\n}\n\n\nvoid controlOR::releaseObjectDB()\n{\n\timage_db.release();\n}\n\n\nvector<resultInfo> controlOR::queryImage(const Mat& src_img, int result_num)\n{\n\tvector<resultInfo>\tretInfo;\n\n\tvector<KeyPoint> kp_vec;\n\/\/\tvector<float> desc_vec;\n\tcv::Mat desc_vec;\n\n\ttry{\n\t\textractFeatures(src_img, kp_vec, desc_vec);\n\n\t\tvector<int> id_list;\n\t\tint ret = getFeatureIdVec(desc_vec, id_list);\n\t\tif(ret < 0)\n\t\t\treturn retInfo;\n\n\t\tretInfo = image_db.retrieveImageId(kp_vec, id_list, src_img.size(), visual_words.getVisualWordNum(), result_num);\n\n\t\tkp_vec.clear();\n\t\tid_list.clear();\n\/\/\t\tdesc_vec.clear();\n\t}\n\tcatch(cv::Exception e)\n\t{\n\t\tthrow e;\n\t}\n\tcatch(std::exception e2)\n\t{\n\t\tthrow e2;\n\t}\n\n\treturn retInfo;\n}\n\n\nbool controlOR::setDetectorType(const std::string& detector_type)\n{\n\tcv::Ptr<cv::FeatureDetector> tmp_detector;\n\ttry{\n\t\ttmp_detector = FeatureDetector::create(detector_type);\n\t\tif(tmp_detector.empty()){\n\t\t\treturn false;\n\t\t}\n\t}\n\tcatch(cv::Exception e){\n\t\treturn false;\n\t}\n\tthis->feature_detector = tmp_detector;\n\tthis->detectorType = detector_type;\n\n\treturn true;\n}\n\n\nbool controlOR::setDescriptorType(const std::string& descriptor_type)\n{\n\tcv::Ptr<cv::DescriptorExtractor> tmp_descriptor;\n\ttry{\n\t\ttmp_descriptor = DescriptorExtractor::create(descriptor_type);\n\t\tif(tmp_descriptor.empty()){\n\t\t\treturn false;\n\t\t}\n\t}\n\tcatch(cv::Exception e){\n\t\treturn false;\n\t}\n\tthis->descriptor_extractor = tmp_descriptor;\n\tthis->descriptorType = descriptor_type;\n\n\treturn true;\n}\n\n\n\/\/int controlOR::getFeatureIdVec(const vector<float>& desc_vec, vector<int>& id_list)\nint controlOR::getFeatureIdVec(const cv::Mat& desc_vec, vector<int>& id_list)\n{\n\tif(desc_vec.empty()){\n\t\treturn -1;\n\t}\n\/\/\tvector<float> desc_point(feature_dimention);\n\n\ttry{\n\t\t\/\/ convert feature vector to Mat\n\/\/\t\tMat desc_points = visual_words.convertFeatureMat(desc_vec);\n\n\t\t\/\/ query and obtain feature point indices\n\t\tMat indices = visual_words.querySearchDB(desc_vec);\n\/\/\t\tMat indices = visual_words.querySearchDB(desc_points);\n\n\t\tint size = desc_vec.rows;\n\/\/\t\tint size = desc_points.rows;\n\n\t\tint i,j;\n\t\tfor(i=0; i<size; i++){\n\t\t\tfor(j=0; j<voteNum; j++){\n\t\t\t\tid_list.push_back(indices.at<int>(i,j));\n\t\t\t}\n\t\t}\n\t}\n\tcatch(std::exception e){\n\t\tthrow e;\n\t}\n\n\treturn 0;\n}\n\n\nbool controlOR::saveVisualWords(const string& filename) const\n{\n\tbool ret = visual_words.save(filename);\n\treturn ret;\n}\n\n\nbool controlOR::saveVisualWordsBinary(const string& filename, const string& idxname) const\n{\n\tbool ret = visual_words.saveBinary(filename, idxname);\n\treturn ret;\n}\n\n\nbool controlOR::loadVisualWords(const string& filename)\n{\n\ttry{\n\t\tbool ret = visual_words.load(filename);\n\t\treturn ret;\n\t}\n\tcatch(std::exception e)\n\t{\n\/\/\t\tthrow e;\n\t\treturn false;\n\t}\n}\n\n\nbool controlOR::loadVisualWordsBinary(const string& filename, const string& idxname)\n{\n\ttry{\n\t\tbool ret = visual_words.loadBinary(filename, idxname);\n\t\treturn ret;\n\t}\n\tcatch(std::exception e)\n\t{\n\/\/\t\tthrow e;\n\t\treturn false;\n\t}\n}\n\n\nint controlOR::loadObjectDB(const string filename)\n{\n\ttry{\n\/\/\t\timage_db.load(filename.c_str());\n\t\tFileStorage cvfs(filename,FileStorage::READ);\n\t\tFileNode cvfn(cvfs.fs, NULL);\n\n\t\tFileNode cvfn1 = cvfn[\"controlOR\"];\n\t\tread(cvfn1);\n\n\t\tFileNode cvfn2 = cvfn[\"imageDB\"];\n\t\timage_db.read(cvfs, cvfn2);\n\n\t\tvisual_words.setVoteNum(voteNum);\n\t\timage_db.setVoteNum(voteNum);\n\t}\n\tcatch(std::exception e2){\n\t\tthrow e2;\n\t}\n\n\treturn 0;\n}\n\n\nvoid controlOR::read(FileNode& cvfn)\n{\n\tvoteNum = cvfn[\"voteNum\"];\n\tdetectorType = cvfn[\"detectorType\"];\n\tdescriptorType = cvfn[\"descriptorType\"];\n\tfeature_detector->create(detectorType);\n\tdescriptor_extractor->create(descriptorType);\n}\n\n\nint controlOR::saveObjectDB(const string filename) const\n{\n\/\/\timage_db.save(filename.c_str());\n\tFileStorage cvfs(filename,FileStorage::WRITE);\n\twrite(cvfs,\"controlOR\");\n\timage_db.write(cvfs, \"imageDB\");\n\n\treturn 0;\n}\n\n\nvoid controlOR::write(FileStorage& fs, string name) const\n{\n\tWriteStructContext ws(fs, name, CV_NODE_MAP);\n\tcv::write(fs, \"voteNum\", voteNum);\n\tcv::write(fs, \"detectorType\", detectorType);\n\tcv::write(fs, \"descriptorType\", descriptorType);\n}\n\n\/\/\/\/\/\/\/ Feature Detector \/\/\/\/\/\/\/\/\n\n\/\/ initialize\nint controlOR::initializeFeatureDetector()\n{\n\/\/\tif(featureDetector)\n\tif(feature_detector || descriptor_extractor)\n\t\treleaseFeatureDetector();\n\/\/\tSURF* surf_pt = new SURF(500,4,2,true);\n\/\/\tfeatureDetector = surf_pt;\n\/\/\tfeature_dimention = 128;\n\tcv::initModule_nonfree();\n\tfeature_detector = FeatureDetector::create(detectorType);\t\/\/ create feature detector\n\tdescriptor_extractor = DescriptorExtractor::create(descriptorType);\t\/\/ create descriptor extractor\n\n\treturn 0;\n}\n\n\/\/int controlOR::extractFeatures(const Mat& src_img, vector<KeyPoint>& kpt, vector<float>& descriptor)\nint controlOR::extractFeatures(const cv::Mat& src_img, cv::vector<cv::KeyPoint>& kpt, cv::Mat& descriptor) const\n{\n\t\/\/ extract freak\n\ttry{\n\t\t\/\/ keypoints detection from a query image\n\t\tfeature_detector->detect(src_img, kpt);\n\t\t\/\/ descriptor extraction\n\t\tdescriptor_extractor->compute(src_img, kpt, descriptor);\n\n\/\/\t\t(*(SURF*)featureDetector)(src_img, Mat(), kpt, descriptor);\n\t\/\/\tcout << \",kpt:\" << kpt.size() << \",\";\n\t}\n\tcatch(cv::Exception e)\n\t{\n\t\torCvException or_e;\n\t\tor_e.setCvExceptionClass(e);\n\t\tor_e.setFunctionName(\"SURF()\");\n\n\t\tthrow or_e;\n\t}\n\n\treturn 0;\n}\n\nint controlOR::releaseFeatureDetector()\n{\n\/\/\tdelete (SURF*)featureDetector;\n\/\/\tfeatureDetector = 0;\n\tfeature_detector.release();\n\tfeature_detector = 0;\n\tdescriptor_extractor.release();\n\tdescriptor_extractor = 0;\n\n\treturn 0;\n}\n\n\nvoid controlOR::setRecogThreshold(float th)\n{\n\timage_db.setThreshold(th);\n}\n\n\nfloat controlOR::getRecogThreshold() const\n{\n\treturn\timage_db.getThreshold();\n}\n","subs":[{"cpp.function":{"pos":1790,"text":"\n\ncontrolOR::controlOR(void)\n{","subs":[{"cpp.return_type":{"pos":1792,"text":""}},{"cpp.function_name":{"pos":1792,"text":"controlOR::controlOR"}},{"cpp.parameters":{"pos":1812,"text":"(void)\n","subs":[{"cpp.single_param":{"pos":1813,"text":"void"}}]}}]}},{"cpp.function":{"pos":2112,"text":"\n\ncontrolOR::~controlOR(void)\n{","subs":[{"cpp.return_type":{"pos":2114,"text":""}},{"cpp.function_name":{"pos":2114,"text":"controlOR::~controlOR"}},{"cpp.parameters":{"pos":2135,"text":"(void)\n","subs":[{"cpp.single_param":{"pos":2136,"text":"void"}}]}}]}},{"cpp.function":{"pos":2208,"text":"\nint controlOR::addFeaturesForVW(const Mat& src_img)\n{","subs":[{"cpp.return_type":{"pos":2209,"text":"int "}},{"cpp.function_name":{"pos":2213,"text":"controlOR::addFeaturesForVW"}},{"cpp.parameters":{"pos":2240,"text":"(const Mat& src_img)\n","subs":[{"cpp.single_param":{"pos":2241,"text":"const Mat& src_img"}}]}}]}},{"cpp.function":{"pos":2472,"text":"\n\n\nint controlOR::createVisualWords(int cluster_number)\n{","subs":[{"cpp.return_type":{"pos":2475,"text":"int "}},{"cpp.function_name":{"pos":2479,"text":"controlOR::createVisualWords"}},{"cpp.parameters":{"pos":2507,"text":"(int cluster_number)\n","subs":[{"cpp.single_param":{"pos":2508,"text":"int cluster_number"}}]}}]}},{"cpp.function":{"pos":2583,"text":"\n\n\nint controlOR::registImage(const cv::Mat& src_img, int img_id)\n{","subs":[{"cpp.return_type":{"pos":2586,"text":"int "}},{"cpp.function_name":{"pos":2590,"text":"controlOR::registImage"}},{"cpp.parameters":{"pos":2612,"text":"(const cv::Mat& src_img, int img_id)\n","subs":[{"cpp.single_param":{"pos":2613,"text":"const cv::Mat& src_img"}},{"cpp.single_param":{"pos":2636,"text":" int img_id"}}]}}]}},{"cpp.function":{"pos":3165,"text":"\n\n\nint controlOR::removeImage(int img_id)\n{","subs":[{"cpp.return_type":{"pos":3168,"text":"int "}},{"cpp.function_name":{"pos":3172,"text":"controlOR::removeImage"}},{"cpp.parameters":{"pos":3194,"text":"(int img_id)\n","subs":[{"cpp.single_param":{"pos":3195,"text":"int img_id"}}]}}]}},{"cpp.function":{"pos":3250,"text":"\n\n\nvoid controlOR::releaseObjectDB()\n{","subs":[{"cpp.return_type":{"pos":3253,"text":"void "}},{"cpp.function_name":{"pos":3258,"text":"controlOR::releaseObjectDB"}},{"cpp.parameters":{"pos":3284,"text":"()\n","subs":[{"cpp.single_param":{"pos":3285,"text":""}}]}}]}},{"cpp.function":{"pos":3311,"text":"\n\n\nvector<resultInfo> controlOR::queryImage(const Mat& src_img, int result_num)\n{","subs":[{"cpp.return_type":{"pos":3314,"text":"vector<resultInfo> "}},{"cpp.function_name":{"pos":3333,"text":"controlOR::queryImage"}},{"cpp.parameters":{"pos":3354,"text":"(const Mat& src_img, int result_num)\n","subs":[{"cpp.single_param":{"pos":3355,"text":"const Mat& src_img"}},{"cpp.single_param":{"pos":3374,"text":" int result_num"}}]}}]}},{"cpp.function":{"pos":3937,"text":"\n\n\nbool controlOR::setDetectorType(const std::string& detector_type)\n{","subs":[{"cpp.return_type":{"pos":3940,"text":"bool "}},{"cpp.function_name":{"pos":3945,"text":"controlOR::setDetectorType"}},{"cpp.parameters":{"pos":3971,"text":"(const std::string& detector_type)\n","subs":[{"cpp.single_param":{"pos":3972,"text":"const std::string& detector_type"}}]}}]}},{"cpp.function":{"pos":4304,"text":"\n\n\nbool controlOR::setDescriptorType(const std::string& descriptor_type)\n{","subs":[{"cpp.return_type":{"pos":4307,"text":"bool "}},{"cpp.function_name":{"pos":4312,"text":"controlOR::setDescriptorType"}},{"cpp.parameters":{"pos":4340,"text":"(const std::string& descriptor_type)\n","subs":[{"cpp.single_param":{"pos":4341,"text":"const std::string& descriptor_type"}}]}}]}},{"cpp.function":{"pos":4789,"text":"\nint controlOR::getFeatureIdVec(const cv::Mat& desc_vec, vector<int>& id_list)\n{","subs":[{"cpp.return_type":{"pos":4790,"text":"int "}},{"cpp.function_name":{"pos":4794,"text":"controlOR::getFeatureIdVec"}},{"cpp.parameters":{"pos":4820,"text":"(const cv::Mat& desc_vec, vector<int>& id_list)\n","subs":[{"cpp.single_param":{"pos":4821,"text":"const cv::Mat& desc_vec"}},{"cpp.single_param":{"pos":4845,"text":" vector<int>& id_list"}}]}}]}},{"cpp.function":{"pos":5459,"text":"\n\n\nbool controlOR::saveVisualWords(const string& filename) const\n{","subs":[{"cpp.return_type":{"pos":5462,"text":"bool "}},{"cpp.function_name":{"pos":5467,"text":"controlOR::saveVisualWords"}},{"cpp.parameters":{"pos":5493,"text":"(const string& filename) ","subs":[{"cpp.single_param":{"pos":5494,"text":"const string& filename"}}]}}]}},{"cpp.function":{"pos":5581,"text":"\n\n\nbool controlOR::saveVisualWordsBinary(const string& filename, const string& idxname) const\n{","subs":[{"cpp.return_type":{"pos":5584,"text":"bool "}},{"cpp.function_name":{"pos":5589,"text":"controlOR::saveVisualWordsBinary"}},{"cpp.parameters":{"pos":5621,"text":"(const string& filename, const string& idxname) ","subs":[{"cpp.single_param":{"pos":5622,"text":"const string& filename"}},{"cpp.single_param":{"pos":5645,"text":" const string& idxname"}}]}}]}},{"cpp.function":{"pos":5747,"text":"\n\n\nbool controlOR::loadVisualWords(const string& filename)\n{","subs":[{"cpp.return_type":{"pos":5750,"text":"bool "}},{"cpp.function_name":{"pos":5755,"text":"controlOR::loadVisualWords"}},{"cpp.parameters":{"pos":5781,"text":"(const string& filename)\n","subs":[{"cpp.single_param":{"pos":5782,"text":"const string& filename"}}]}}]}},{"cpp.function":{"pos":5934,"text":"\n\n\nbool controlOR::loadVisualWordsBinary(const string& filename, const string& idxname)\n{","subs":[{"cpp.return_type":{"pos":5937,"text":"bool "}},{"cpp.function_name":{"pos":5942,"text":"controlOR::loadVisualWordsBinary"}},{"cpp.parameters":{"pos":5974,"text":"(const string& filename, const string& idxname)\n","subs":[{"cpp.single_param":{"pos":5975,"text":"const string& filename"}},{"cpp.single_param":{"pos":5998,"text":" const string& idxname"}}]}}]}},{"cpp.function":{"pos":6165,"text":"\n\n\nint controlOR::loadObjectDB(const string filename)\n{","subs":[{"cpp.return_type":{"pos":6168,"text":"int "}},{"cpp.function_name":{"pos":6172,"text":"controlOR::loadObjectDB"}},{"cpp.parameters":{"pos":6195,"text":"(const string filename)\n","subs":[{"cpp.single_param":{"pos":6196,"text":"const string filename"}}]}}]}},{"cpp.function":{"pos":6592,"text":"\n\n\nvoid controlOR::read(FileNode& cvfn)\n{","subs":[{"cpp.return_type":{"pos":6595,"text":"void "}},{"cpp.function_name":{"pos":6600,"text":"controlOR::read"}},{"cpp.parameters":{"pos":6615,"text":"(FileNode& cvfn)\n","subs":[{"cpp.single_param":{"pos":6616,"text":"FileNode& cvfn"}}]}}]}},{"cpp.function":{"pos":6831,"text":"\n\n\nint controlOR::saveObjectDB(const string filename) const\n{","subs":[{"cpp.return_type":{"pos":6834,"text":"int "}},{"cpp.function_name":{"pos":6838,"text":"controlOR::saveObjectDB"}},{"cpp.parameters":{"pos":6861,"text":"(const string filename) ","subs":[{"cpp.single_param":{"pos":6862,"text":"const string filename"}}]}}]}},{"cpp.function":{"pos":7050,"text":"\n\n\nvoid controlOR::write(FileStorage& fs, string name) const\n{","subs":[{"cpp.return_type":{"pos":7053,"text":"void "}},{"cpp.function_name":{"pos":7058,"text":"controlOR::write"}},{"cpp.parameters":{"pos":7074,"text":"(FileStorage& fs, string name) ","subs":[{"cpp.single_param":{"pos":7075,"text":"FileStorage& fs"}},{"cpp.single_param":{"pos":7091,"text":" string name"}}]}}]}},{"cpp.function":{"pos":7343,"text":"\nint controlOR::initializeFeatureDetector()\n{","subs":[{"cpp.return_type":{"pos":7344,"text":"int "}},{"cpp.function_name":{"pos":7348,"text":"controlOR::initializeFeatureDetector"}},{"cpp.parameters":{"pos":7384,"text":"()\n","subs":[{"cpp.single_param":{"pos":7385,"text":""}}]}}]}},{"cpp.function":{"pos":7917,"text":"\nint controlOR::extractFeatures(const cv::Mat& src_img, cv::vector<cv::KeyPoint>& kpt, cv::Mat& descriptor) const\n{","subs":[{"cpp.return_type":{"pos":7918,"text":"int "}},{"cpp.function_name":{"pos":7922,"text":"controlOR::extractFeatures"}},{"cpp.parameters":{"pos":7948,"text":"(const cv::Mat& src_img, cv::vector<cv::KeyPoint>& kpt, cv::Mat& descriptor) ","subs":[{"cpp.single_param":{"pos":7949,"text":"const cv::Mat& src_img"}},{"cpp.single_param":{"pos":7972,"text":" cv::vector<cv::KeyPoint>& kpt"}},{"cpp.single_param":{"pos":8003,"text":" cv::Mat& descriptor"}}]}}]}},{"cpp.function":{"pos":8484,"text":"\n\nint controlOR::releaseFeatureDetector()\n{","subs":[{"cpp.return_type":{"pos":8486,"text":"int "}},{"cpp.function_name":{"pos":8490,"text":"controlOR::releaseFeatureDetector"}},{"cpp.parameters":{"pos":8523,"text":"()\n","subs":[{"cpp.single_param":{"pos":8524,"text":""}}]}}]}},{"cpp.function":{"pos":8711,"text":"\n\n\nvoid controlOR::setRecogThreshold(float th)\n{","subs":[{"cpp.return_type":{"pos":8714,"text":"void "}},{"cpp.function_name":{"pos":8719,"text":"controlOR::setRecogThreshold"}},{"cpp.parameters":{"pos":8747,"text":"(float th)\n","subs":[{"cpp.single_param":{"pos":8748,"text":"float th"}}]}}]}},{"cpp.function":{"pos":8789,"text":"\n\n\nfloat controlOR::getRecogThreshold() const\n{","subs":[{"cpp.return_type":{"pos":8792,"text":"float "}},{"cpp.function_name":{"pos":8798,"text":"controlOR::getRecogThreshold"}},{"cpp.parameters":{"pos":8826,"text":"() ","subs":[{"cpp.single_param":{"pos":8827,"text":""}}]}}]}}]}}
