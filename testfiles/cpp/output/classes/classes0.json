{"cpp.classes":{"text":"\/*******************************************************************************\r\n *  Project: libopencad\r\n *  Purpose: OpenSource CAD formats support library\r\n *  Author: Alexandr Borzykh, mush3d at gmail.com\r\n *  Author: Dmitry Baryshnikov, bishop.dev@gmail.com\r\n *  Language: C++\r\n *******************************************************************************\r\n *  The MIT License (MIT)\r\n *\r\n *  Copyright (c) 2016 Alexandr Borzykh\r\n *  Copyright (c) 2016 NextGIS, <info@nextgis.com>\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"Software\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in all\r\n *  copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *  SOFTWARE.\r\n *******************************************************************************\/\r\n#include \"cadclasses.h\"\r\n#include \"opencad.h\"\r\n\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nCADClasses::CADClasses()\r\n{\r\n}\r\n\r\nvoid CADClasses::addClass( CADClass stClass )\r\n{\r\n    classes.push_back( stClass );\r\n\r\n    DebugMsg( \"CLASS INFO\\n\"\r\n                      \"  Class Number: %d\\n\"\r\n                      \"  Proxy capabilities flag or Version: %d\\n\"\r\n                      \"  App name: %s\\n\"\r\n                      \"  C++ Class Name: %s\\n\"\r\n                      \"  DXF Class name: %s\\n\"\r\n                      \"  Was a zombie? %x\\n\"\r\n                      \"  Is-an-entity flag: %x\\n\\n\", stClass.dClassNum, stClass.dProxyCapFlag,\r\n              stClass.sApplicationName.c_str(), stClass.sCppClassName.c_str(), stClass.sDXFRecordName.c_str(),\r\n              stClass.bWasZombie, stClass.bIsEntity );\r\n}\r\n\r\nCADClass CADClasses::getClassByNum( short num ) const\r\n{\r\n    for( CADClass cadClass : classes )\r\n    {\r\n        if( cadClass.dClassNum == num )\r\n            return cadClass;\r\n    }\r\n    return CADClass();\r\n}\r\n\r\nvoid CADClasses::print() const\r\n{\r\n    cout << \"============ CLASSES Section ============\" << endl;\r\n\r\n    for( CADClass stClass : classes )\r\n    {\r\n        cout << \"Class: \" << endl;\r\n        cout << \"  Class Number: \" << stClass.dClassNum << endl;\r\n        cout << \"  Proxy capabilities flag or Version: \" << stClass.dProxyCapFlag << endl;\r\n        cout << \"  App name: \" << stClass.sApplicationName << endl;\r\n        cout << \"  C++ Class Name: \" << stClass.sCppClassName << endl;\r\n        cout << \"  DXF Class name: \" << stClass.sDXFRecordName << endl;\r\n        cout << \"  Was a zombie: \" << stClass.bWasZombie << endl;\r\n        cout << \"  Is-an-entity flag: \" << stClass.bIsEntity << endl << endl;\r\n    }\r\n}","pos":1}}
