{"vb.classes":{"pos":1,"subs":[{"vb.class":{"pos":1,"subs":[{"vb.classdef":{"pos":1,"subs":[{"vb.classname":{"pos":7,"text":"bankAccount"}}],"text":"Class bankAccount\n    "}},{"vb.classbody":{"pos":23,"text":"Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\n"}},{"vb.classend":{"pos":647,"text":"End Class"}}],"text":"Class bankAccount\n    Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\nEnd Class"}},{"vb.class":{"pos":658,"subs":[{"vb.classdef":{"pos":658,"subs":[{"vb.classname":{"pos":675,"text":"ICustomerInfo"}}],"text":"Public Interface ICustomerInfo\n    "}},{"vb.classbody":{"pos":693,"text":"Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\n"}},{"vb.classend":{"pos":785,"text":"End Interface"}}],"text":"Public Interface ICustomerInfo\n    Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\nEnd Interface"}},{"vb.class":{"pos":800,"subs":[{"vb.classdef":{"pos":800,"subs":[{"vb.classname":{"pos":813,"text":"customerInfo"}},{"vb.interfacenames":{"pos":841,"subs":[{"vb.interfacename":{"pos":841,"text":"ICustomerInfo"}}],"text":"ICustomerInfo"}}],"text":"Public Class customerInfo\n    Implements ICustomerInfo"}},{"vb.classbody":{"pos":859,"text":"' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\n"}},{"vb.classend":{"pos":1670,"text":"End Class"}}],"text":"Public Class customerInfo\n    Implements ICustomerInfo\n    ' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\nEnd Class"}},{"vb.class":{"pos":1681,"subs":[{"vb.classdef":{"pos":1681,"subs":[{"vb.classname":{"pos":1694,"text":"dictionary"}},{"vb.typelist":{"pos":1708,"subs":[{"vb.typenames":{"pos":1708,"subs":[{"vb.typename":{"pos":1708,"text":"entryType"}},{"vb.typename":{"pos":1719,"text":"keyType"}}],"text":"entryType, keyType"}},{"vb.constraintlist":{"pos":1730,"subs":[{"vb.constraint":{"pos":1731,"text":"IComparable"}},{"vb.constraint":{"pos":1744,"text":"IFormattable"}},{"vb.constraint":{"pos":1758,"text":"New"}}],"text":"{IComparable, IFormattable, New}"}}],"text":"entryType, keyType As {IComparable, IFormattable, New}"}}],"text":"Public Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    "}},{"vb.classbody":{"pos":1768,"text":"Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\n"}},{"vb.classend":{"pos":1917,"text":"End Class"}}],"text":"Public Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\nEnd Class"}}],"text":"Class bankAccount\n    Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\nEnd Class\n\nPublic Interface ICustomerInfo\n    Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\nEnd Interface\n\nPublic Class customerInfo\n    Implements ICustomerInfo\n    ' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\nEnd Class\n\nPublic Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\nEnd Class\n\n"}}
