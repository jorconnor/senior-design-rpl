{"cs.functions":{"pos":1,"text":"\/\/ Code sourced under MIT License from alphaleonis\/AlphaVSS\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing AlphaShadow.Options;\nusing System.Text;\nusing System.Diagnostics;\n\nnamespace AlphaShadow\n{\n   public class ConsoleHost : IUIHost\n   {\n      private int m_indent = 0;\n\n      public ConsoleHost()\n      {\n         IsWordWrapEnabled = true;\n      }\n\n      public void WriteHeader(string message, params object[] args)\n      {\n         WriteLine(ConsoleColor.Cyan, WordWrap(message, args));\n      }\n\n      public void WriteLine(string message, params object[] args)\n      {\n         WriteLine(Console.ForegroundColor, WordWrap(message, args));\n      }\n\n      public void WriteWarning(string message, params object[] args)\n      {\n         WriteMessage(ConsoleColor.Red, \"Warning:\", message, args);\n      }\n\n      public void WriteError(string message, params object[] args)\n      {\n         WriteMessage(ConsoleColor.Red, \"Error:\", message, args);\n      }\n\n      public void WriteVerbose(string message, params object[] args)\n      {\n         if (VerboseOutputEnabled)\n            WriteLine(ConsoleColor.DarkGray, WordWrap(message, args));\n      }\n\n      private void WriteMessage(ConsoleColor color, string label, string message, params object[] args)\n      {\n         if (IsWordWrapEnabled)\n         {\n            int col1Width = label.Length;\n            int col2Width = Math.Max(1, Console.WindowWidth - col1Width - 2);\n\n            string text = StringFormatter.FormatInColumns(m_indent, 1,\n               new StringFormatter.ColumnInfo(col1Width, label),\n               new StringFormatter.ColumnInfo(col2Width, String.Format(message, args)));\n\n            WriteLine(color, text);\n         }\n         else\n         {\n            WriteLine(color, label + \" \" + String.Format(message, args));\n         }\n      }\n\n\n      private void WriteLine(ConsoleColor color, string message)\n      {\n         ConsoleColor temp = Console.ForegroundColor;\n         Console.ForegroundColor = color;\n         Console.WriteLine(message);\n         Console.ForegroundColor = temp;\n      }\n\n      private string WordWrap(string message, params object[] args)\n      {\n         if (IsWordWrapEnabled)\n         {\n            StringBuilder sb = new StringBuilder();\n            string wrappedString = StringFormatter.WordWrap((args == null || args.Length == 0) ? message : String.Format(message, args), Console.WindowWidth - 5 - m_indent, StringFormatter.WordWrappingMethod.Greedy);\n            IList<string> splitString = StringFormatter.SplitAtLineBreaks(wrappedString);\n            for (int i = 0; i < splitString.Count; i++)\n            {\n               if (i != 0)\n                  sb.AppendLine();\n               sb.Append(String.Format(\"{0}{1}\", new String(' ', m_indent), splitString[i]));\n            }\n            return sb.ToString();\n         }\n         else\n         {\n            return new String(' ', m_indent) + String.Format(message, args);\n         }\n      }\n\n      public void WriteLine()\n      {\n         Console.WriteLine();\n      }\n\n\n      public bool VerboseOutputEnabled\n      {\n         get;\n         set;\n      }\n\n      public bool IsWordWrapEnabled { get; set; }\n\n      public void WriteTable(StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false)\n      {\n         if (table == null)\n            throw new ArgumentNullException(\"table\", \"table is null.\");\n\n         if (IsWordWrapEnabled)\n         {\n            int indent = m_indent;\n            if (indent >= Console.WindowWidth - columnSpacing - 2)\n               indent = 0;\n\n            int maxWidth = Console.WindowWidth - indent;\n            int col1Width = Math.Min(table.Labels.Max(text => text.Length), maxWidth \/ 2);\n            int colSpacing = columnSpacing;\n            int col2Width = maxWidth - col1Width - colSpacing - 1;\n\n            for (int i = 0; i < table.Count; i++)\n            {\n               if (i > 0 && addVerticalSeparation)\n                  Console.WriteLine();\n\n               Console.WriteLine(\n                  StringFormatter.FormatInColumns(indent, colSpacing,\n                  new StringFormatter.ColumnInfo(col1Width, table.Labels[i]),\n                  new StringFormatter.ColumnInfo(col2Width, table.Values[i])));\n\n            }\n         }\n         else\n         {\n            for (int i = 0; i < table.Count; i++)\n            {\n               Console.WriteLine(\"{0}{1}{2}{3}\", new String(' ', m_indent), table.Labels[i], new String(' ', columnSpacing), table.Values[i]);\n            }\n         }\n\n      }\n\n      public void PushIndent()\n      {\n         m_indent += 3;\n      }\n\n      public void PopIndent()\n      {\n         m_indent -= 3;\n         if (m_indent < 0)\n            m_indent = 0;\n      }\n\n      public IDisposable GetIndent()\n      {\n         return new Indenter(this);\n      }\n\n      private class Indenter : IDisposable\n      {\n         IUIHost m_host;\n         public Indenter(IUIHost host)\n         {\n            m_host = host;\n            m_host.PushIndent();\n         }\n\n         public void Dispose()\n         {\n            m_host.PopIndent();\n         }\n      }\n\n      public void ExecCommand(string execCommand, string args)\n      {\n         WriteLine(\"- Executing command '{0}' ...\", execCommand);\n         WriteLine(\"-----------------------------------------------------\");\n\n         ProcessStartInfo ps = new ProcessStartInfo(execCommand, args);\n         ps.CreateNoWindow = false;\n         ps.UseShellExecute = false;\n\n         Process p = Process.Start(ps);\n         p.WaitForExit();\n         WriteLine(\"-----------------------------------------------------\");\n\n         if (p.ExitCode != 0)\n         {\n            WriteError(\"Command line '{0}' failed!. Aborting the backup...\", execCommand);\n            WriteError(\"Returned error code: {0}\", p.ExitCode);\n            throw new CommandAbortedException();\n         }\n      }\n\n      public bool ShouldContinue()\n      {\n         WriteHeader(\"Continue? [Y\/N]\");\n         string response = Console.ReadLine();\n         return response.Equals(\"y\", StringComparison.OrdinalIgnoreCase) || response.Equals(\"yes\", StringComparison.OrdinalIgnoreCase);\n      }\n   }\n}\n","subs":[{"cs.funcdef":{"pos":386,"text":"public void WriteHeader(string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":386,"text":"public"}},{"cs.returntype":{"pos":393,"text":"void"}},{"cs.methodname":{"pos":398,"text":"WriteHeader"}},{"cs.paramlist":{"pos":410,"text":"string message, params object[] args","subs":[{"cs.param":{"pos":410,"text":"string message","subs":[{"cs.paramtype":{"pos":410,"text":"string"}},{"cs.paramname":{"pos":417,"text":"message"}}]}},{"cs.param":{"pos":426,"text":"params object[] args","subs":[{"cs.parammod":{"pos":426,"text":"params"}},{"cs.paramtype":{"pos":433,"text":"object[]"}},{"cs.paramname":{"pos":442,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":535,"text":"public void WriteLine(string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":535,"text":"public"}},{"cs.returntype":{"pos":542,"text":"void"}},{"cs.methodname":{"pos":547,"text":"WriteLine"}},{"cs.paramlist":{"pos":557,"text":"string message, params object[] args","subs":[{"cs.param":{"pos":557,"text":"string message","subs":[{"cs.paramtype":{"pos":557,"text":"string"}},{"cs.paramname":{"pos":564,"text":"message"}}]}},{"cs.param":{"pos":573,"text":"params object[] args","subs":[{"cs.parammod":{"pos":573,"text":"params"}},{"cs.paramtype":{"pos":580,"text":"object[]"}},{"cs.paramname":{"pos":589,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":688,"text":"public void WriteWarning(string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":688,"text":"public"}},{"cs.returntype":{"pos":695,"text":"void"}},{"cs.methodname":{"pos":700,"text":"WriteWarning"}},{"cs.paramlist":{"pos":713,"text":"string message, params object[] args","subs":[{"cs.param":{"pos":713,"text":"string message","subs":[{"cs.paramtype":{"pos":713,"text":"string"}},{"cs.paramname":{"pos":720,"text":"message"}}]}},{"cs.param":{"pos":729,"text":"params object[] args","subs":[{"cs.parammod":{"pos":729,"text":"params"}},{"cs.paramtype":{"pos":736,"text":"object[]"}},{"cs.paramname":{"pos":745,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":842,"text":"public void WriteError(string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":842,"text":"public"}},{"cs.returntype":{"pos":849,"text":"void"}},{"cs.methodname":{"pos":854,"text":"WriteError"}},{"cs.paramlist":{"pos":865,"text":"string message, params object[] args","subs":[{"cs.param":{"pos":865,"text":"string message","subs":[{"cs.paramtype":{"pos":865,"text":"string"}},{"cs.paramname":{"pos":872,"text":"message"}}]}},{"cs.param":{"pos":881,"text":"params object[] args","subs":[{"cs.parammod":{"pos":881,"text":"params"}},{"cs.paramtype":{"pos":888,"text":"object[]"}},{"cs.paramname":{"pos":897,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":992,"text":"public void WriteVerbose(string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":992,"text":"public"}},{"cs.returntype":{"pos":999,"text":"void"}},{"cs.methodname":{"pos":1004,"text":"WriteVerbose"}},{"cs.paramlist":{"pos":1017,"text":"string message, params object[] args","subs":[{"cs.param":{"pos":1017,"text":"string message","subs":[{"cs.paramtype":{"pos":1017,"text":"string"}},{"cs.paramname":{"pos":1024,"text":"message"}}]}},{"cs.param":{"pos":1033,"text":"params object[] args","subs":[{"cs.parammod":{"pos":1033,"text":"params"}},{"cs.paramtype":{"pos":1040,"text":"object[]"}},{"cs.paramname":{"pos":1049,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":1184,"text":"private void WriteMessage(ConsoleColor color, string label, string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":1184,"text":"private"}},{"cs.returntype":{"pos":1192,"text":"void"}},{"cs.methodname":{"pos":1197,"text":"WriteMessage"}},{"cs.paramlist":{"pos":1210,"text":"ConsoleColor color, string label, string message, params object[] args","subs":[{"cs.param":{"pos":1210,"text":"ConsoleColor color","subs":[{"cs.paramtype":{"pos":1210,"text":"ConsoleColor"}},{"cs.paramname":{"pos":1223,"text":"color"}}]}},{"cs.param":{"pos":1230,"text":"string label","subs":[{"cs.paramtype":{"pos":1230,"text":"string"}},{"cs.paramname":{"pos":1237,"text":"label"}}]}},{"cs.param":{"pos":1244,"text":"string message","subs":[{"cs.paramtype":{"pos":1244,"text":"string"}},{"cs.paramname":{"pos":1251,"text":"message"}}]}},{"cs.param":{"pos":1260,"text":"params object[] args","subs":[{"cs.parammod":{"pos":1260,"text":"params"}},{"cs.paramtype":{"pos":1267,"text":"object[]"}},{"cs.paramname":{"pos":1276,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":1853,"text":"private void WriteLine(ConsoleColor color, string message)\n      {","subs":[{"cs.accessmod":{"pos":1853,"text":"private"}},{"cs.returntype":{"pos":1861,"text":"void"}},{"cs.methodname":{"pos":1866,"text":"WriteLine"}},{"cs.paramlist":{"pos":1876,"text":"ConsoleColor color, string message","subs":[{"cs.param":{"pos":1876,"text":"ConsoleColor color","subs":[{"cs.paramtype":{"pos":1876,"text":"ConsoleColor"}},{"cs.paramname":{"pos":1889,"text":"color"}}]}},{"cs.param":{"pos":1896,"text":"string message","subs":[{"cs.paramtype":{"pos":1896,"text":"string"}},{"cs.paramname":{"pos":1903,"text":"message"}}]}}]}}]}},{"cs.funcdef":{"pos":2109,"text":"private string WordWrap(string message, params object[] args)\n      {","subs":[{"cs.accessmod":{"pos":2109,"text":"private"}},{"cs.returntype":{"pos":2117,"text":"string"}},{"cs.methodname":{"pos":2124,"text":"WordWrap"}},{"cs.paramlist":{"pos":2133,"text":"string message, params object[] args","subs":[{"cs.param":{"pos":2133,"text":"string message","subs":[{"cs.paramtype":{"pos":2133,"text":"string"}},{"cs.paramname":{"pos":2140,"text":"message"}}]}},{"cs.param":{"pos":2149,"text":"params object[] args","subs":[{"cs.parammod":{"pos":2149,"text":"params"}},{"cs.paramtype":{"pos":2156,"text":"object[]"}},{"cs.paramname":{"pos":2165,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":2994,"text":"public void WriteLine()\n      {","subs":[{"cs.accessmod":{"pos":2994,"text":"public"}},{"cs.returntype":{"pos":3001,"text":"void"}},{"cs.methodname":{"pos":3006,"text":"WriteLine"}}]}},{"cs.funcdef":{"pos":3207,"text":"public void WriteTable(StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false)\n      {","subs":[{"cs.accessmod":{"pos":3207,"text":"public"}},{"cs.returntype":{"pos":3214,"text":"void"}},{"cs.methodname":{"pos":3219,"text":"WriteTable"}},{"cs.paramlist":{"pos":3230,"text":"StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false","subs":[{"cs.param":{"pos":3230,"text":"StringTable table","subs":[{"cs.paramtype":{"pos":3230,"text":"StringTable"}},{"cs.paramname":{"pos":3242,"text":"table"}}]}},{"cs.param":{"pos":3249,"text":"int columnSpacing = 3","subs":[{"cs.paramtype":{"pos":3249,"text":"int"}},{"cs.paramname":{"pos":3253,"text":"columnSpacing"}},{"cs.defaultval":{"pos":3269,"text":"3"}}]}},{"cs.param":{"pos":3272,"text":"bool addVerticalSeparation = false","subs":[{"cs.paramtype":{"pos":3272,"text":"bool"}},{"cs.paramname":{"pos":3277,"text":"addVerticalSeparation"}},{"cs.defaultval":{"pos":3301,"text":"false"}}]}}]}}]}},{"cs.funcdef":{"pos":4566,"text":"public void PushIndent()\n      {","subs":[{"cs.accessmod":{"pos":4566,"text":"public"}},{"cs.returntype":{"pos":4573,"text":"void"}},{"cs.methodname":{"pos":4578,"text":"PushIndent"}}]}},{"cs.funcdef":{"pos":4638,"text":"public void PopIndent()\n      {","subs":[{"cs.accessmod":{"pos":4638,"text":"public"}},{"cs.returntype":{"pos":4645,"text":"void"}},{"cs.methodname":{"pos":4650,"text":"PopIndent"}}]}},{"cs.funcdef":{"pos":4762,"text":"public IDisposable GetIndent()\n      {","subs":[{"cs.accessmod":{"pos":4762,"text":"public"}},{"cs.returntype":{"pos":4769,"text":"IDisposable"}},{"cs.methodname":{"pos":4781,"text":"GetIndent"}}]}},{"cs.funcdef":{"pos":5053,"text":"public void Dispose()\n         {","subs":[{"cs.accessmod":{"pos":5053,"text":"public"}},{"cs.returntype":{"pos":5060,"text":"void"}},{"cs.methodname":{"pos":5065,"text":"Dispose"}}]}},{"cs.funcdef":{"pos":5144,"text":"public void ExecCommand(string execCommand, string args)\n      {","subs":[{"cs.accessmod":{"pos":5144,"text":"public"}},{"cs.returntype":{"pos":5151,"text":"void"}},{"cs.methodname":{"pos":5156,"text":"ExecCommand"}},{"cs.paramlist":{"pos":5168,"text":"string execCommand, string args","subs":[{"cs.param":{"pos":5168,"text":"string execCommand","subs":[{"cs.paramtype":{"pos":5168,"text":"string"}},{"cs.paramname":{"pos":5175,"text":"execCommand"}}]}},{"cs.param":{"pos":5188,"text":"string args","subs":[{"cs.paramtype":{"pos":5188,"text":"string"}},{"cs.paramname":{"pos":5195,"text":"args"}}]}}]}}]}},{"cs.funcdef":{"pos":5914,"text":"public bool ShouldContinue()\n      {","subs":[{"cs.accessmod":{"pos":5914,"text":"public"}},{"cs.returntype":{"pos":5921,"text":"bool"}},{"cs.methodname":{"pos":5926,"text":"ShouldContinue"}}]}}]}}
