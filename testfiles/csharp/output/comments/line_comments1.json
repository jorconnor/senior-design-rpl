{"cs.line_comments":{"subs":[{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":95,"text":" * http:"}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":105,"text":"techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html\r"}}],"pos":103,"text":"\/\/techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html\r"}}],"pos":95,"text":" * http:\/\/techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1564,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1570,"text":" Example usage:\r"}}],"pos":1568,"text":"\/\/ Example usage:\r"}}],"pos":1564,"text":"    \/\/ Example usage:\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1587,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1593,"text":"\r"}}],"pos":1591,"text":"\/\/\r"}}],"pos":1587,"text":"    \/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1595,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1601,"text":"  using UnityEngine;\r"}}],"pos":1599,"text":"\/\/  using UnityEngine;\r"}}],"pos":1595,"text":"    \/\/  using UnityEngine;\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1623,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1629,"text":"  using System.Collections;\r"}}],"pos":1627,"text":"\/\/  using System.Collections;\r"}}],"pos":1623,"text":"    \/\/  using System.Collections;\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1658,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1664,"text":"  using System.Collections.Generic;\r"}}],"pos":1662,"text":"\/\/  using System.Collections.Generic;\r"}}],"pos":1658,"text":"    \/\/  using System.Collections.Generic;\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1701,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1707,"text":"  using MiniJSON;\r"}}],"pos":1705,"text":"\/\/  using MiniJSON;\r"}}],"pos":1701,"text":"    \/\/  using MiniJSON;\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1726,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1732,"text":"\r"}}],"pos":1730,"text":"\/\/\r"}}],"pos":1726,"text":"    \/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1734,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1740,"text":"  public class MiniJSONTest : MonoBehaviour {\r"}}],"pos":1738,"text":"\/\/  public class MiniJSONTest : MonoBehaviour {\r"}}],"pos":1734,"text":"    \/\/  public class MiniJSONTest : MonoBehaviour {\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1787,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1793,"text":"      void Start () {\r"}}],"pos":1791,"text":"\/\/      void Start () {\r"}}],"pos":1787,"text":"    \/\/      void Start () {\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1816,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1822,"text":"          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +\r"}}],"pos":1820,"text":"\/\/          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +\r"}}],"pos":1816,"text":"    \/\/          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1880,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1886,"text":"                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +\r"}}],"pos":1884,"text":"\/\/                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +\r"}}],"pos":1880,"text":"    \/\/                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1967,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1973,"text":"                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +\r"}}],"pos":1971,"text":"\/\/                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +\r"}}],"pos":1967,"text":"    \/\/                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2075,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2081,"text":"                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +\r"}}],"pos":2079,"text":"\/\/                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +\r"}}],"pos":2075,"text":"    \/\/                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2161,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2167,"text":"                          \"\\\"int\\\": 65536, \" +\r"}}],"pos":2165,"text":"\/\/                          \"\\\"int\\\": 65536, \" +\r"}}],"pos":2161,"text":"    \/\/                          \"\\\"int\\\": 65536, \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2215,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2221,"text":"                          \"\\\"float\\\": 3.1415926, \" +\r"}}],"pos":2219,"text":"\/\/                          \"\\\"float\\\": 3.1415926, \" +\r"}}],"pos":2215,"text":"    \/\/                          \"\\\"float\\\": 3.1415926, \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2275,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2281,"text":"                          \"\\\"bool\\\": true, \" +\r"}}],"pos":2279,"text":"\/\/                          \"\\\"bool\\\": true, \" +\r"}}],"pos":2275,"text":"    \/\/                          \"\\\"bool\\\": true, \" +\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2329,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2335,"text":"                          \"\\\"null\\\": null }\";\r"}}],"pos":2333,"text":"\/\/                          \"\\\"null\\\": null }\";\r"}}],"pos":2329,"text":"    \/\/                          \"\\\"null\\\": null }\";\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2382,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2388,"text":"\r"}}],"pos":2386,"text":"\/\/\r"}}],"pos":2382,"text":"    \/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2390,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2396,"text":"          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;\r"}}],"pos":2394,"text":"\/\/          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;\r"}}],"pos":2390,"text":"    \/\/          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2477,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2483,"text":"\r"}}],"pos":2481,"text":"\/\/\r"}}],"pos":2477,"text":"    \/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2485,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2491,"text":"          Debug.Log(\"deserialized: \" + dict.GetType());\r"}}],"pos":2489,"text":"\/\/          Debug.Log(\"deserialized: \" + dict.GetType());\r"}}],"pos":2485,"text":"    \/\/          Debug.Log(\"deserialized: \" + dict.GetType());\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2548,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2554,"text":"          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);\r"}}],"pos":2552,"text":"\/\/          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);\r"}}],"pos":2548,"text":"    \/\/          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2634,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2640,"text":"          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);\r"}}],"pos":2638,"text":"\/\/          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);\r"}}],"pos":2634,"text":"    \/\/          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2708,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2714,"text":"          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles\r"}}],"pos":2712,"text":"\/\/          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles\r"}}],"pos":2708,"text":"    \/\/          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2810,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2816,"text":"          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs\r"}}],"pos":2814,"text":"\/\/          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs\r"}}],"pos":2810,"text":"    \/\/          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2902,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2908,"text":"          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);\r"}}],"pos":2906,"text":"\/\/          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);\r"}}],"pos":2902,"text":"    \/\/          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2978,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2984,"text":"\r"}}],"pos":2982,"text":"\/\/\r"}}],"pos":2978,"text":"    \/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2986,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2992,"text":"          var str = Json.Serialize(dict);\r"}}],"pos":2990,"text":"\/\/          var str = Json.Serialize(dict);\r"}}],"pos":2986,"text":"    \/\/          var str = Json.Serialize(dict);\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3035,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3041,"text":"\r"}}],"pos":3039,"text":"\/\/\r"}}],"pos":3035,"text":"    \/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3043,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3049,"text":"          Debug.Log(\"serialized: \" + str);\r"}}],"pos":3047,"text":"\/\/          Debug.Log(\"serialized: \" + str);\r"}}],"pos":3043,"text":"    \/\/          Debug.Log(\"serialized: \" + str);\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3093,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3099,"text":"      }\r"}}],"pos":3097,"text":"\/\/      }\r"}}],"pos":3093,"text":"    \/\/      }\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3108,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3114,"text":"  }\r"}}],"pos":3112,"text":"\/\/  }\r"}}],"pos":3108,"text":"    \/\/  }\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3125,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3131,"text":"\/ <summary>\r"}}],"pos":3129,"text":"\/\/\/ <summary>\r"}}],"pos":3125,"text":"    \/\/\/ <summary>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3144,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3150,"text":"\/ This class encodes and decodes JSON strings.\r"}}],"pos":3148,"text":"\/\/\/ This class encodes and decodes JSON strings.\r"}}],"pos":3144,"text":"    \/\/\/ This class encodes and decodes JSON strings.\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3198,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3204,"text":"\/ Spec. details, see http:\/\/www.json.org\/\r"}}],"pos":3202,"text":"\/\/\/ Spec. details, see http:\/\/www.json.org\/\r"}}],"pos":3198,"text":"    \/\/\/ Spec. details, see http:\/\/www.json.org\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3247,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3253,"text":"\/\r"}}],"pos":3251,"text":"\/\/\/\r"}}],"pos":3247,"text":"    \/\/\/\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3256,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3262,"text":"\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.\r"}}],"pos":3260,"text":"\/\/\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.\r"}}],"pos":3256,"text":"    \/\/\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3357,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3363,"text":"\/ All numbers are parsed to doubles.\r"}}],"pos":3361,"text":"\/\/\/ All numbers are parsed to doubles.\r"}}],"pos":3357,"text":"    \/\/\/ All numbers are parsed to doubles.\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3401,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3407,"text":"\/ <\/summary>\r"}}],"pos":3405,"text":"\/\/\/ <\/summary>\r"}}],"pos":3401,"text":"    \/\/\/ <\/summary>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3458,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3468,"text":"\/ <summary>\r"}}],"pos":3466,"text":"\/\/\/ <summary>\r"}}],"pos":3458,"text":"        \/\/\/ <summary>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3481,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3491,"text":"\/ Parses the string json into a value\r"}}],"pos":3489,"text":"\/\/\/ Parses the string json into a value\r"}}],"pos":3481,"text":"        \/\/\/ Parses the string json into a value\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3530,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3540,"text":"\/ <\/summary>\r"}}],"pos":3538,"text":"\/\/\/ <\/summary>\r"}}],"pos":3530,"text":"        \/\/\/ <\/summary>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3554,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3564,"text":"\/ <param name=\"json\">A JSON string.<\/param>\r"}}],"pos":3562,"text":"\/\/\/ <param name=\"json\">A JSON string.<\/param>\r"}}],"pos":3554,"text":"        \/\/\/ <param name=\"json\">A JSON string.<\/param>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3609,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3619,"text":"\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>\r"}}],"pos":3617,"text":"\/\/\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>\r"}}],"pos":3609,"text":"        \/\/\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3818,"text":"            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3832,"text":" save the string for debug information\r"}}],"pos":3830,"text":"\/\/ save the string for debug information\r"}}],"pos":3818,"text":"            \/\/ save the string for debug information\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":5883,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":5901,"text":" ditch opening brace\r"}}],"pos":5899,"text":"\/\/ ditch opening brace\r"}}],"pos":5883,"text":"                \/\/ ditch opening brace\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":5971,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":5989,"text":" {\r"}}],"pos":5987,"text":"\/\/ {\r"}}],"pos":5971,"text":"                \/\/ {\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6397,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6427,"text":" name\r"}}],"pos":6425,"text":"\/\/ name\r"}}],"pos":6397,"text":"                            \/\/ name\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6677,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6707,"text":" :\r"}}],"pos":6705,"text":"\/\/ :\r"}}],"pos":6677,"text":"                            \/\/ :\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6878,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6908,"text":" ditch the colon\r"}}],"pos":6906,"text":"\/\/ ditch the colon\r"}}],"pos":6878,"text":"                            \/\/ ditch the colon\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6998,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":7028,"text":" value\r"}}],"pos":7026,"text":"\/\/ value\r"}}],"pos":6998,"text":"                            \/\/ value\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":7331,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":7349,"text":" ditch opening bracket\r"}}],"pos":7347,"text":"\/\/ ditch opening bracket\r"}}],"pos":7331,"text":"                \/\/ ditch opening bracket\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":7421,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":7439,"text":" [\r"}}],"pos":7437,"text":"\/\/ [\r"}}],"pos":7421,"text":"                \/\/ [\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":10509,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":10527,"text":" ditch opening quote\r"}}],"pos":10525,"text":"\/\/ ditch opening quote\r"}}],"pos":10509,"text":"                \/\/ ditch opening quote\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":17106,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":17116,"text":"\/ <summary>\r"}}],"pos":17114,"text":"\/\/\/ <summary>\r"}}],"pos":17106,"text":"        \/\/\/ <summary>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":17129,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":17139,"text":"\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string\r"}}],"pos":17137,"text":"\/\/\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string\r"}}],"pos":17129,"text":"        \/\/\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":17236,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":17246,"text":"\/ <\/summary>\r"}}],"pos":17244,"text":"\/\/\/ <\/summary>\r"}}],"pos":17236,"text":"        \/\/\/ <\/summary>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":17260,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":17270,"text":"\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>\r"}}],"pos":17268,"text":"\/\/\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>\r"}}],"pos":17260,"text":"        \/\/\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":17356,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":17366,"text":"\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>\r"}}],"pos":17364,"text":"\/\/\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>\r"}}],"pos":17356,"text":"        \/\/\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":22325,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":22343,"text":" NOTE: decimals lose precision during serialization.\r"}}],"pos":22341,"text":"\/\/ NOTE: decimals lose precision during serialization.\r"}}],"pos":22325,"text":"                \/\/ NOTE: decimals lose precision during serialization.\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":22397,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":22415,"text":" They always have, I'm just letting you know.\r"}}],"pos":22413,"text":"\/\/ They always have, I'm just letting you know.\r"}}],"pos":22397,"text":"                \/\/ They always have, I'm just letting you know.\r"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":22462,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":22480,"text":" Previously floats and doubles lost precision too.\r"}}],"pos":22478,"text":"\/\/ Previously floats and doubles lost precision too.\r"}}],"pos":22462,"text":"                \/\/ Previously floats and doubles lost precision too.\r"}}],"pos":1,"text":"\/*\r\n * Copyright (c) 2013 Calvin Rien\r\n *\r\n * Based on the JSON parser by Patrick van Bergen\r\n * http:\/\/techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html\r\n *\r\n * Simplified it so that it doesn't throw exceptions\r\n * and can be used in Unity iPhone with maximum code stripping.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and\/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\/\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\n\r\nnamespace MiniJSON\r\n{\r\n    \/\/ Example usage:\r\n    \/\/\r\n    \/\/  using UnityEngine;\r\n    \/\/  using System.Collections;\r\n    \/\/  using System.Collections.Generic;\r\n    \/\/  using MiniJSON;\r\n    \/\/\r\n    \/\/  public class MiniJSONTest : MonoBehaviour {\r\n    \/\/      void Start () {\r\n    \/\/          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +\r\n    \/\/                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +\r\n    \/\/                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +\r\n    \/\/                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +\r\n    \/\/                          \"\\\"int\\\": 65536, \" +\r\n    \/\/                          \"\\\"float\\\": 3.1415926, \" +\r\n    \/\/                          \"\\\"bool\\\": true, \" +\r\n    \/\/                          \"\\\"null\\\": null }\";\r\n    \/\/\r\n    \/\/          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;\r\n    \/\/\r\n    \/\/          Debug.Log(\"deserialized: \" + dict.GetType());\r\n    \/\/          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);\r\n    \/\/          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);\r\n    \/\/          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles\r\n    \/\/          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs\r\n    \/\/          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);\r\n    \/\/\r\n    \/\/          var str = Json.Serialize(dict);\r\n    \/\/\r\n    \/\/          Debug.Log(\"serialized: \" + str);\r\n    \/\/      }\r\n    \/\/  }\r\n    \r\n    \/\/\/ <summary>\r\n    \/\/\/ This class encodes and decodes JSON strings.\r\n    \/\/\/ Spec. details, see http:\/\/www.json.org\/\r\n    \/\/\/\r\n    \/\/\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.\r\n    \/\/\/ All numbers are parsed to doubles.\r\n    \/\/\/ <\/summary>\r\n    public static class Json\r\n    {\r\n        \/\/\/ <summary>\r\n        \/\/\/ Parses the string json into a value\r\n        \/\/\/ <\/summary>\r\n        \/\/\/ <param name=\"json\">A JSON string.<\/param>\r\n        \/\/\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>\r\n        public static object Deserialize(string json)\r\n        {\r\n            \/\/ save the string for debug information\r\n            if (json == null)\r\n            {\r\n                return null;\r\n            }\r\n            \r\n            return Parser.Parse(json);\r\n        }\r\n\r\n        public static List<object> DeserializeArrayNoRecursion(string json)\r\n        {\r\n            if (json == null)\r\n            {\r\n                return null;\r\n            } else if (json == \"\" || json == \"[]\")\r\n            {\r\n                return new List<object>(0);\r\n            }\r\n\r\n            Parser parser = new Parser(json);\r\n            return parser.ParseArrayOnly();\r\n        }\r\n        \r\n        sealed class Parser : IDisposable\r\n        {\r\n            const string WORD_BREAK = \"{}[],:\\\"\";\r\n            \r\n            public static bool IsWordBreak(char c)\r\n            {\r\n                return Char.IsWhiteSpace(c) || WORD_BREAK.IndexOf(c) != -1;\r\n            }\r\n            \r\n            enum TOKEN\r\n            {\r\n                NONE,\r\n                CURLY_OPEN,\r\n                CURLY_CLOSE,\r\n                SQUARED_OPEN,\r\n                SQUARED_CLOSE,\r\n                COLON,\r\n                COMMA,\r\n                STRING,\r\n                NUMBER,\r\n                TRUE,\r\n                FALSE,\r\n                NULL\r\n            }\r\n            ;\r\n            \r\n            StringReader json;\r\n            \r\n            public Parser(string jsonString)\r\n            {\r\n                json = new StringReader(jsonString);\r\n            }\r\n            \r\n            public static object Parse(string jsonString)\r\n            {\r\n                using (var instance = new Parser(jsonString))\r\n                {\r\n                    return instance.ParseValue();\r\n                }\r\n            }\r\n            \r\n            public void Dispose()\r\n            {\r\n                json.Dispose();\r\n                json = null;\r\n            }\r\n            \r\n            Dictionary<string, object> ParseObject()\r\n            {\r\n                Dictionary<string, object> table = new Dictionary<string, object>();\r\n                \r\n                \/\/ ditch opening brace\r\n                json.Read();\r\n                \r\n                \/\/ {\r\n                while (true)\r\n                {\r\n                    switch (NextToken)\r\n                    {\r\n                        case TOKEN.NONE:\r\n                            return null;\r\n                        case TOKEN.COMMA:\r\n                            continue;\r\n                        case TOKEN.CURLY_CLOSE:\r\n                            return table;\r\n                        default:\r\n                            \/\/ name\r\n                            string name = ParseString();\r\n                            if (name == null)\r\n                            {\r\n                                return null;\r\n                            }\r\n                            \r\n                            \/\/ :\r\n                            if (NextToken != TOKEN.COLON)\r\n                            {\r\n                                return null;\r\n                            }\r\n                            \/\/ ditch the colon\r\n                            json.Read();\r\n                            \r\n                            \/\/ value\r\n                            table [name] = ParseValue();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            List<object> ParseArray()\r\n            {\r\n                List<object> array = new List<object>();\r\n                \r\n                \/\/ ditch opening bracket\r\n                json.Read();\r\n                \r\n                \/\/ [\r\n                var parsing = true;\r\n                while (parsing)\r\n                {\r\n                    TOKEN nextToken = NextToken;\r\n                    \r\n                    switch (nextToken)\r\n                    {\r\n                        case TOKEN.NONE:\r\n                            return null;\r\n                        case TOKEN.COMMA:\r\n                            continue;\r\n                        case TOKEN.SQUARED_CLOSE:\r\n                            parsing = false;\r\n                            break;\r\n                        default:\r\n                            object value = ParseByToken(nextToken);\r\n                            \r\n                            array.Add(value);\r\n                            break;\r\n                    }\r\n                }\r\n                \r\n                return array;\r\n            }\r\n\r\n            internal List<object> ParseArrayOnly()\r\n            {\r\n                String wholeArray = json.ReadToEnd().TrimEnd(new char[]\r\n                {\r\n                    ']',\r\n                    ' '\r\n                });\r\n                List<object> array = new List<object>();\r\n                int lvl = 0, start = 0;\r\n\r\n                for (int i = 0; i < wholeArray.Length; i++)\r\n                {\r\n                    char currChar = wholeArray [i];\r\n                    if (currChar == '{')\r\n                    {\r\n                        lvl++;\r\n                        if (lvl == 1)\r\n                        {\r\n                            start = i;\r\n                        }\r\n                    } else if (currChar == '}')\r\n                    {\r\n                        lvl--;\r\n                        if (lvl == 0)\r\n                        {\r\n                            array.Add(wholeArray.Substring(start, i - start + 1));\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return array;\r\n            }\r\n\r\n            object ParseValue()\r\n            {\r\n                TOKEN nextToken = NextToken;\r\n                return ParseByToken(nextToken);\r\n            }\r\n            \r\n            object ParseByToken(TOKEN token)\r\n            {\r\n                switch (token)\r\n                {\r\n                    case TOKEN.STRING:\r\n                        return ParseString();\r\n                    case TOKEN.NUMBER:\r\n                        return ParseNumber();\r\n                    case TOKEN.CURLY_OPEN:\r\n                        return ParseObject();\r\n                    case TOKEN.SQUARED_OPEN:\r\n                        return ParseArray();\r\n                    case TOKEN.TRUE:\r\n                        return true;\r\n                    case TOKEN.FALSE:\r\n                        return false;\r\n                    case TOKEN.NULL:\r\n                        return null;\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n            \r\n            string ParseString()\r\n            {\r\n                StringBuilder s = new StringBuilder();\r\n                char c;\r\n                \r\n                \/\/ ditch opening quote\r\n                json.Read();\r\n                \r\n                bool parsing = true;\r\n                while (parsing)\r\n                {\r\n                    \r\n                    if (json.Peek() == -1)\r\n                    {\r\n                        parsing = false;\r\n                        break;\r\n                    }\r\n                    \r\n                    c = NextChar;\r\n                    switch (c)\r\n                    {\r\n                        case '\"':\r\n                            parsing = false;\r\n                            break;\r\n                        case '\\\\':\r\n                            if (json.Peek() == -1)\r\n                            {\r\n                                parsing = false;\r\n                                break;\r\n                            }\r\n                            \r\n                            c = NextChar;\r\n                            switch (c)\r\n                            {\r\n                                case '\"':\r\n                                case '\\\\':\r\n                                case '\/':\r\n                                    s.Append(c);\r\n                                    break;\r\n                                case 'b':\r\n                                    s.Append('\\b');\r\n                                    break;\r\n                                case 'f':\r\n                                    s.Append('\\f');\r\n                                    break;\r\n                                case 'n':\r\n                                    s.Append('\\n');\r\n                                    break;\r\n                                case 'r':\r\n                                    s.Append('\\r');\r\n                                    break;\r\n                                case 't':\r\n                                    s.Append('\\t');\r\n                                    break;\r\n                                case 'u':\r\n                                    var hex = new char[4];\r\n                                    \r\n                                    for (int i=0; i< 4; i++)\r\n                                    {\r\n                                        hex [i] = NextChar;\r\n                                    }\r\n                                    \r\n                                    s.Append((char)Convert.ToInt32(new string(hex), 16));\r\n                                    break;\r\n                            }\r\n                            break;\r\n                        default:\r\n                            s.Append(c);\r\n                            break;\r\n                    }\r\n                }\r\n                \r\n                return s.ToString();\r\n            }\r\n            \r\n            object ParseNumber()\r\n            {\r\n                string number = NextWord;\r\n                \r\n                if (number.IndexOf('.') == -1)\r\n                {\r\n                    long parsedInt;\r\n                    Int64.TryParse(number, out parsedInt);\r\n                    return parsedInt;\r\n                }\r\n                \r\n                double parsedDouble;\r\n                Double.TryParse(number, out parsedDouble);\r\n                return parsedDouble;\r\n            }\r\n            \r\n            void EatWhitespace()\r\n            {\r\n                while (Char.IsWhiteSpace(PeekChar))\r\n                {\r\n                    json.Read();\r\n                    \r\n                    if (json.Peek() == -1)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            char PeekChar\r\n            {\r\n                get\r\n                {\r\n                    return Convert.ToChar(json.Peek());\r\n                }\r\n            }\r\n            \r\n            char NextChar\r\n            {\r\n                get\r\n                {\r\n                    return Convert.ToChar(json.Read());\r\n                }\r\n            }\r\n            \r\n            string NextWord\r\n            {\r\n                get\r\n                {\r\n                    StringBuilder word = new StringBuilder();\r\n                    \r\n                    while (!IsWordBreak(PeekChar))\r\n                    {\r\n                        word.Append(NextChar);\r\n                        \r\n                        if (json.Peek() == -1)\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    return word.ToString();\r\n                }\r\n            }\r\n            \r\n            TOKEN NextToken\r\n            {\r\n                get\r\n                {\r\n                    EatWhitespace();\r\n                    \r\n                    if (json.Peek() == -1)\r\n                    {\r\n                        return TOKEN.NONE;\r\n                    }\r\n                    \r\n                    switch (PeekChar)\r\n                    {\r\n                        case '{':\r\n                            return TOKEN.CURLY_OPEN;\r\n                        case '}':\r\n                            json.Read();\r\n                            return TOKEN.CURLY_CLOSE;\r\n                        case '[':\r\n                            return TOKEN.SQUARED_OPEN;\r\n                        case ']':\r\n                            json.Read();\r\n                            return TOKEN.SQUARED_CLOSE;\r\n                        case ',':\r\n                            json.Read();\r\n                            return TOKEN.COMMA;\r\n                        case '\"':\r\n                            return TOKEN.STRING;\r\n                        case ':':\r\n                            return TOKEN.COLON;\r\n                        case '0':\r\n                        case '1':\r\n                        case '2':\r\n                        case '3':\r\n                        case '4':\r\n                        case '5':\r\n                        case '6':\r\n                        case '7':\r\n                        case '8':\r\n                        case '9':\r\n                        case '-':\r\n                            return TOKEN.NUMBER;\r\n                    }\r\n                    \r\n                    switch (NextWord)\r\n                    {\r\n                        case \"false\":\r\n                            return TOKEN.FALSE;\r\n                        case \"true\":\r\n                            return TOKEN.TRUE;\r\n                        case \"null\":\r\n                            return TOKEN.NULL;\r\n                    }\r\n                    \r\n                    return TOKEN.NONE;\r\n                }\r\n            }\r\n        }\r\n        \r\n        \/\/\/ <summary>\r\n        \/\/\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string\r\n        \/\/\/ <\/summary>\r\n        \/\/\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>\r\n        \/\/\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>\r\n        public static string Serialize(object obj)\r\n        {\r\n            return Serializer.Serialize(obj);\r\n        }\r\n        \r\n        sealed class Serializer\r\n        {\r\n            StringBuilder builder;\r\n            \r\n            Serializer()\r\n            {\r\n                builder = new StringBuilder();\r\n            }\r\n            \r\n            public static string Serialize(object obj)\r\n            {\r\n                var instance = new Serializer();\r\n                \r\n                instance.SerializeValue(obj);\r\n                \r\n                return instance.builder.ToString();\r\n            }\r\n            \r\n            void SerializeValue(object value)\r\n            {\r\n                IList asList;\r\n                IDictionary asDict;\r\n                string asStr;\r\n                \r\n                if (value == null)\r\n                {\r\n                    builder.Append(\"null\");\r\n                } else if ((asStr = value as string) != null)\r\n                {\r\n                    SerializeString(asStr);\r\n                } else if (value is bool)\r\n                {\r\n                    builder.Append((bool)value ? \"true\" : \"false\");\r\n                } else if ((asList = value as IList) != null)\r\n                {\r\n                    SerializeArray(asList);\r\n                } else if ((asDict = value as IDictionary) != null)\r\n                {\r\n                    SerializeObject(asDict);\r\n                } else if (value is char)\r\n                {\r\n                    SerializeString(new string((char)value, 1));\r\n                } else\r\n                {\r\n                    SerializeOther(value);\r\n                }\r\n            }\r\n            \r\n            void SerializeObject(IDictionary obj)\r\n            {\r\n                bool first = true;\r\n                \r\n                builder.Append('{');\r\n                \r\n                foreach (object e in obj.Keys)\r\n                {\r\n                    if (!first)\r\n                    {\r\n                        builder.Append(',');\r\n                    }\r\n                    \r\n                    SerializeString(e.ToString());\r\n                    builder.Append(':');\r\n                    \r\n                    SerializeValue(obj [e]);\r\n                    \r\n                    first = false;\r\n                }\r\n                \r\n                builder.Append('}');\r\n            }\r\n            \r\n            void SerializeArray(IList anArray)\r\n            {\r\n                builder.Append('[');\r\n                \r\n                bool first = true;\r\n                \r\n                foreach (object obj in anArray)\r\n                {\r\n                    if (!first)\r\n                    {\r\n                        builder.Append(',');\r\n                    }\r\n                    \r\n                    SerializeValue(obj);\r\n                    \r\n                    first = false;\r\n                }\r\n                \r\n                builder.Append(']');\r\n            }\r\n            \r\n            void SerializeString(string str)\r\n            {\r\n                builder.Append('\\\"');\r\n                \r\n                char[] charArray = str.ToCharArray();\r\n                foreach (var c in charArray)\r\n                {\r\n                    switch (c)\r\n                    {\r\n                        case '\"':\r\n                            builder.Append(\"\\\\\\\"\");\r\n                            break;\r\n                        case '\\\\':\r\n                            builder.Append(\"\\\\\\\\\");\r\n                            break;\r\n                        case '\\b':\r\n                            builder.Append(\"\\\\b\");\r\n                            break;\r\n                        case '\\f':\r\n                            builder.Append(\"\\\\f\");\r\n                            break;\r\n                        case '\\n':\r\n                            builder.Append(\"\\\\n\");\r\n                            break;\r\n                        case '\\r':\r\n                            builder.Append(\"\\\\r\");\r\n                            break;\r\n                        case '\\t':\r\n                            builder.Append(\"\\\\t\");\r\n                            break;\r\n                        default:\r\n                            int codepoint = Convert.ToInt32(c);\r\n                            if ((codepoint >= 32) && (codepoint <= 126))\r\n                            {\r\n                                builder.Append(c);\r\n                            } else\r\n                            {\r\n                                builder.Append(\"\\\\u\");\r\n                                builder.Append(codepoint.ToString(\"x4\"));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                \r\n                builder.Append('\\\"');\r\n            }\r\n            \r\n            void SerializeOther(object value)\r\n            {\r\n                \/\/ NOTE: decimals lose precision during serialization.\r\n                \/\/ They always have, I'm just letting you know.\r\n                \/\/ Previously floats and doubles lost precision too.\r\n                if (value is float)\r\n                {\r\n                    builder.Append(((float)value).ToString(\"R\"));\r\n                } else if (value is int\r\n                    || value is uint\r\n                    || value is long\r\n                    || value is sbyte\r\n                    || value is byte\r\n                    || value is short\r\n                    || value is ushort\r\n                    || value is ulong)\r\n                {\r\n                    builder.Append(value);\r\n                } else if (value is double\r\n                    || value is decimal)\r\n                {\r\n                    builder.Append(Convert.ToDouble(value).ToString(\"R\"));\r\n                } else\r\n                {\r\n                    SerializeString(value.ToString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n"}}
