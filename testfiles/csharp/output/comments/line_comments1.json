{"cs.line_comments":{"subs":[{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":91,"text":" * http:"}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":101,"text":"techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html"}}],"pos":99,"text":"\/\/techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html"}}],"pos":91,"text":" * http:\/\/techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1528,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1534,"text":" Example usage:"}}],"pos":1532,"text":"\/\/ Example usage:"}}],"pos":1528,"text":"    \/\/ Example usage:"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1550,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1556,"text":""}}],"pos":1554,"text":"\/\/"}}],"pos":1550,"text":"    \/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1557,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1563,"text":"  using UnityEngine;"}}],"pos":1561,"text":"\/\/  using UnityEngine;"}}],"pos":1557,"text":"    \/\/  using UnityEngine;"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1584,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1590,"text":"  using System.Collections;"}}],"pos":1588,"text":"\/\/  using System.Collections;"}}],"pos":1584,"text":"    \/\/  using System.Collections;"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1618,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1624,"text":"  using System.Collections.Generic;"}}],"pos":1622,"text":"\/\/  using System.Collections.Generic;"}}],"pos":1618,"text":"    \/\/  using System.Collections.Generic;"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1660,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1666,"text":"  using MiniJSON;"}}],"pos":1664,"text":"\/\/  using MiniJSON;"}}],"pos":1660,"text":"    \/\/  using MiniJSON;"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1684,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1690,"text":""}}],"pos":1688,"text":"\/\/"}}],"pos":1684,"text":"    \/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1691,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1697,"text":"  public class MiniJSONTest : MonoBehaviour {"}}],"pos":1695,"text":"\/\/  public class MiniJSONTest : MonoBehaviour {"}}],"pos":1691,"text":"    \/\/  public class MiniJSONTest : MonoBehaviour {"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1743,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1749,"text":"      void Start () {"}}],"pos":1747,"text":"\/\/      void Start () {"}}],"pos":1743,"text":"    \/\/      void Start () {"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1771,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1777,"text":"          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +"}}],"pos":1775,"text":"\/\/          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +"}}],"pos":1771,"text":"    \/\/          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1834,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1840,"text":"                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +"}}],"pos":1838,"text":"\/\/                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +"}}],"pos":1834,"text":"    \/\/                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":1920,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":1926,"text":"                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +"}}],"pos":1924,"text":"\/\/                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +"}}],"pos":1920,"text":"    \/\/                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2027,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2033,"text":"                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +"}}],"pos":2031,"text":"\/\/                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +"}}],"pos":2027,"text":"    \/\/                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2112,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2118,"text":"                          \"\\\"int\\\": 65536, \" +"}}],"pos":2116,"text":"\/\/                          \"\\\"int\\\": 65536, \" +"}}],"pos":2112,"text":"    \/\/                          \"\\\"int\\\": 65536, \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2165,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2171,"text":"                          \"\\\"float\\\": 3.1415926, \" +"}}],"pos":2169,"text":"\/\/                          \"\\\"float\\\": 3.1415926, \" +"}}],"pos":2165,"text":"    \/\/                          \"\\\"float\\\": 3.1415926, \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2224,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2230,"text":"                          \"\\\"bool\\\": true, \" +"}}],"pos":2228,"text":"\/\/                          \"\\\"bool\\\": true, \" +"}}],"pos":2224,"text":"    \/\/                          \"\\\"bool\\\": true, \" +"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2277,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2283,"text":"                          \"\\\"null\\\": null }\";"}}],"pos":2281,"text":"\/\/                          \"\\\"null\\\": null }\";"}}],"pos":2277,"text":"    \/\/                          \"\\\"null\\\": null }\";"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2329,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2335,"text":""}}],"pos":2333,"text":"\/\/"}}],"pos":2329,"text":"    \/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2336,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2342,"text":"          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;"}}],"pos":2340,"text":"\/\/          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;"}}],"pos":2336,"text":"    \/\/          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2422,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2428,"text":""}}],"pos":2426,"text":"\/\/"}}],"pos":2422,"text":"    \/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2429,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2435,"text":"          Debug.Log(\"deserialized: \" + dict.GetType());"}}],"pos":2433,"text":"\/\/          Debug.Log(\"deserialized: \" + dict.GetType());"}}],"pos":2429,"text":"    \/\/          Debug.Log(\"deserialized: \" + dict.GetType());"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2491,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2497,"text":"          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);"}}],"pos":2495,"text":"\/\/          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);"}}],"pos":2491,"text":"    \/\/          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2576,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2582,"text":"          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);"}}],"pos":2580,"text":"\/\/          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);"}}],"pos":2576,"text":"    \/\/          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2649,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2655,"text":"          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles"}}],"pos":2653,"text":"\/\/          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles"}}],"pos":2649,"text":"    \/\/          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2750,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2756,"text":"          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs"}}],"pos":2754,"text":"\/\/          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs"}}],"pos":2750,"text":"    \/\/          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2841,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2847,"text":"          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);"}}],"pos":2845,"text":"\/\/          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);"}}],"pos":2841,"text":"    \/\/          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2916,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2922,"text":""}}],"pos":2920,"text":"\/\/"}}],"pos":2916,"text":"    \/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2923,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2929,"text":"          var str = Json.Serialize(dict);"}}],"pos":2927,"text":"\/\/          var str = Json.Serialize(dict);"}}],"pos":2923,"text":"    \/\/          var str = Json.Serialize(dict);"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2971,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2977,"text":""}}],"pos":2975,"text":"\/\/"}}],"pos":2971,"text":"    \/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":2978,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":2984,"text":"          Debug.Log(\"serialized: \" + str);"}}],"pos":2982,"text":"\/\/          Debug.Log(\"serialized: \" + str);"}}],"pos":2978,"text":"    \/\/          Debug.Log(\"serialized: \" + str);"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3027,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3033,"text":"      }"}}],"pos":3031,"text":"\/\/      }"}}],"pos":3027,"text":"    \/\/      }"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3041,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3047,"text":"  }"}}],"pos":3045,"text":"\/\/  }"}}],"pos":3041,"text":"    \/\/  }"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3056,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3062,"text":"\/ <summary>"}}],"pos":3060,"text":"\/\/\/ <summary>"}}],"pos":3056,"text":"    \/\/\/ <summary>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3074,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3080,"text":"\/ This class encodes and decodes JSON strings."}}],"pos":3078,"text":"\/\/\/ This class encodes and decodes JSON strings."}}],"pos":3074,"text":"    \/\/\/ This class encodes and decodes JSON strings."}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3127,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3133,"text":"\/ Spec. details, see http:\/\/www.json.org\/"}}],"pos":3131,"text":"\/\/\/ Spec. details, see http:\/\/www.json.org\/"}}],"pos":3127,"text":"    \/\/\/ Spec. details, see http:\/\/www.json.org\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3175,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3181,"text":"\/"}}],"pos":3179,"text":"\/\/\/"}}],"pos":3175,"text":"    \/\/\/"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3183,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3189,"text":"\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary."}}],"pos":3187,"text":"\/\/\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary."}}],"pos":3183,"text":"    \/\/\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary."}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3283,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3289,"text":"\/ All numbers are parsed to doubles."}}],"pos":3287,"text":"\/\/\/ All numbers are parsed to doubles."}}],"pos":3283,"text":"    \/\/\/ All numbers are parsed to doubles."}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3326,"text":"    "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3332,"text":"\/ <\/summary>"}}],"pos":3330,"text":"\/\/\/ <\/summary>"}}],"pos":3326,"text":"    \/\/\/ <\/summary>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3380,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3390,"text":"\/ <summary>"}}],"pos":3388,"text":"\/\/\/ <summary>"}}],"pos":3380,"text":"        \/\/\/ <summary>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3402,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3412,"text":"\/ Parses the string json into a value"}}],"pos":3410,"text":"\/\/\/ Parses the string json into a value"}}],"pos":3402,"text":"        \/\/\/ Parses the string json into a value"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3450,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3460,"text":"\/ <\/summary>"}}],"pos":3458,"text":"\/\/\/ <\/summary>"}}],"pos":3450,"text":"        \/\/\/ <\/summary>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3473,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3483,"text":"\/ <param name=\"json\">A JSON string.<\/param>"}}],"pos":3481,"text":"\/\/\/ <param name=\"json\">A JSON string.<\/param>"}}],"pos":3473,"text":"        \/\/\/ <param name=\"json\">A JSON string.<\/param>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3527,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3537,"text":"\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>"}}],"pos":3535,"text":"\/\/\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>"}}],"pos":3527,"text":"        \/\/\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":3733,"text":"            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":3747,"text":" save the string for debug information"}}],"pos":3745,"text":"\/\/ save the string for debug information"}}],"pos":3733,"text":"            \/\/ save the string for debug information"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":5724,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":5742,"text":" ditch opening brace"}}],"pos":5740,"text":"\/\/ ditch opening brace"}}],"pos":5724,"text":"                \/\/ ditch opening brace"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":5809,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":5827,"text":" {"}}],"pos":5825,"text":"\/\/ {"}}],"pos":5809,"text":"                \/\/ {"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6223,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6253,"text":" name"}}],"pos":6251,"text":"\/\/ name"}}],"pos":6223,"text":"                            \/\/ name"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6496,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6526,"text":" :"}}],"pos":6524,"text":"\/\/ :"}}],"pos":6496,"text":"                            \/\/ :"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6692,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6722,"text":" ditch the colon"}}],"pos":6720,"text":"\/\/ ditch the colon"}}],"pos":6692,"text":"                            \/\/ ditch the colon"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":6809,"text":"                            "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":6839,"text":" value"}}],"pos":6837,"text":"\/\/ value"}}],"pos":6809,"text":"                            \/\/ value"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":7131,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":7149,"text":" ditch opening bracket"}}],"pos":7147,"text":"\/\/ ditch opening bracket"}}],"pos":7131,"text":"                \/\/ ditch opening bracket"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":7218,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":7236,"text":" ["}}],"pos":7234,"text":"\/\/ ["}}],"pos":7218,"text":"                \/\/ ["}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":10213,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":10231,"text":" ditch opening quote"}}],"pos":10229,"text":"\/\/ ditch opening quote"}}],"pos":10213,"text":"                \/\/ ditch opening quote"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":16616,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":16626,"text":"\/ <summary>"}}],"pos":16624,"text":"\/\/\/ <summary>"}}],"pos":16616,"text":"        \/\/\/ <summary>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":16638,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":16648,"text":"\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string"}}],"pos":16646,"text":"\/\/\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string"}}],"pos":16638,"text":"        \/\/\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":16744,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":16754,"text":"\/ <\/summary>"}}],"pos":16752,"text":"\/\/\/ <\/summary>"}}],"pos":16744,"text":"        \/\/\/ <\/summary>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":16767,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":16777,"text":"\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>"}}],"pos":16775,"text":"\/\/\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>"}}],"pos":16767,"text":"        \/\/\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":16862,"text":"        "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":16872,"text":"\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>"}}],"pos":16870,"text":"\/\/\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>"}}],"pos":16862,"text":"        \/\/\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>"}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":21683,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":21701,"text":" NOTE: decimals lose precision during serialization."}}],"pos":21699,"text":"\/\/ NOTE: decimals lose precision during serialization."}}],"pos":21683,"text":"                \/\/ NOTE: decimals lose precision during serialization."}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":21754,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":21772,"text":" They always have, I'm just letting you know."}}],"pos":21770,"text":"\/\/ They always have, I'm just letting you know."}}],"pos":21754,"text":"                \/\/ They always have, I'm just letting you know."}},{"cs.line_comment":{"subs":[{"cs.line_comment_context":{"pos":21818,"text":"                "}},{"cs.line_comment_body":{"subs":[{"cs.line_comment_text":{"pos":21836,"text":" Previously floats and doubles lost precision too."}}],"pos":21834,"text":"\/\/ Previously floats and doubles lost precision too."}}],"pos":21818,"text":"                \/\/ Previously floats and doubles lost precision too."}}],"pos":1,"text":"\/*\n * Copyright (c) 2013 Calvin Rien\n *\n * Based on the JSON parser by Patrick van Bergen\n * http:\/\/techblog.procurios.nl\/k\/618\/news\/view\/14605\/14863\/How-do-I-write-my-own-parser-for-JSON.html\n *\n * Simplified it so that it doesn't throw exceptions\n * and can be used in Unity iPhone with maximum code stripping.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and\/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\/\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\n\nnamespace MiniJSON\n{\n    \/\/ Example usage:\n    \/\/\n    \/\/  using UnityEngine;\n    \/\/  using System.Collections;\n    \/\/  using System.Collections.Generic;\n    \/\/  using MiniJSON;\n    \/\/\n    \/\/  public class MiniJSONTest : MonoBehaviour {\n    \/\/      void Start () {\n    \/\/          var jsonString = \"{ \\\"array\\\": [1.44,2,3], \" +\n    \/\/                          \"\\\"object\\\": {\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":256}, \" +\n    \/\/                          \"\\\"string\\\": \\\"The quick brown fox \\\\\\\"jumps\\\\\\\" over the lazy dog \\\", \" +\n    \/\/                          \"\\\"unicode\\\": \\\"\\\\u3041 Men\\u00fa sesi\\u00f3n\\\", \" +\n    \/\/                          \"\\\"int\\\": 65536, \" +\n    \/\/                          \"\\\"float\\\": 3.1415926, \" +\n    \/\/                          \"\\\"bool\\\": true, \" +\n    \/\/                          \"\\\"null\\\": null }\";\n    \/\/\n    \/\/          var dict = Json.Deserialize(jsonString) as Dictionary<string,object>;\n    \/\/\n    \/\/          Debug.Log(\"deserialized: \" + dict.GetType());\n    \/\/          Debug.Log(\"dict['array'][0]: \" + ((List<object>) dict[\"array\"])[0]);\n    \/\/          Debug.Log(\"dict['string']: \" + (string) dict[\"string\"]);\n    \/\/          Debug.Log(\"dict['float']: \" + (double) dict[\"float\"]); \/\/ floats come out as doubles\n    \/\/          Debug.Log(\"dict['int']: \" + (long) dict[\"int\"]); \/\/ ints come out as longs\n    \/\/          Debug.Log(\"dict['unicode']: \" + (string) dict[\"unicode\"]);\n    \/\/\n    \/\/          var str = Json.Serialize(dict);\n    \/\/\n    \/\/          Debug.Log(\"serialized: \" + str);\n    \/\/      }\n    \/\/  }\n    \n    \/\/\/ <summary>\n    \/\/\/ This class encodes and decodes JSON strings.\n    \/\/\/ Spec. details, see http:\/\/www.json.org\/\n    \/\/\/\n    \/\/\/ JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.\n    \/\/\/ All numbers are parsed to doubles.\n    \/\/\/ <\/summary>\n    public static class Json\n    {\n        \/\/\/ <summary>\n        \/\/\/ Parses the string json into a value\n        \/\/\/ <\/summary>\n        \/\/\/ <param name=\"json\">A JSON string.<\/param>\n        \/\/\/ <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false<\/returns>\n        public static object Deserialize(string json)\n        {\n            \/\/ save the string for debug information\n            if (json == null)\n            {\n                return null;\n            }\n            \n            return Parser.Parse(json);\n        }\n\n        public static List<object> DeserializeArrayNoRecursion(string json)\n        {\n            if (json == null)\n            {\n                return null;\n            } else if (json == \"\" || json == \"[]\")\n            {\n                return new List<object>(0);\n            }\n\n            Parser parser = new Parser(json);\n            return parser.ParseArrayOnly();\n        }\n        \n        sealed class Parser : IDisposable\n        {\n            const string WORD_BREAK = \"{}[],:\\\"\";\n            \n            public static bool IsWordBreak(char c)\n            {\n                return Char.IsWhiteSpace(c) || WORD_BREAK.IndexOf(c) != -1;\n            }\n            \n            enum TOKEN\n            {\n                NONE,\n                CURLY_OPEN,\n                CURLY_CLOSE,\n                SQUARED_OPEN,\n                SQUARED_CLOSE,\n                COLON,\n                COMMA,\n                STRING,\n                NUMBER,\n                TRUE,\n                FALSE,\n                NULL\n            }\n            ;\n            \n            StringReader json;\n            \n            public Parser(string jsonString)\n            {\n                json = new StringReader(jsonString);\n            }\n            \n            public static object Parse(string jsonString)\n            {\n                using (var instance = new Parser(jsonString))\n                {\n                    return instance.ParseValue();\n                }\n            }\n            \n            public void Dispose()\n            {\n                json.Dispose();\n                json = null;\n            }\n            \n            Dictionary<string, object> ParseObject()\n            {\n                Dictionary<string, object> table = new Dictionary<string, object>();\n                \n                \/\/ ditch opening brace\n                json.Read();\n                \n                \/\/ {\n                while (true)\n                {\n                    switch (NextToken)\n                    {\n                        case TOKEN.NONE:\n                            return null;\n                        case TOKEN.COMMA:\n                            continue;\n                        case TOKEN.CURLY_CLOSE:\n                            return table;\n                        default:\n                            \/\/ name\n                            string name = ParseString();\n                            if (name == null)\n                            {\n                                return null;\n                            }\n                            \n                            \/\/ :\n                            if (NextToken != TOKEN.COLON)\n                            {\n                                return null;\n                            }\n                            \/\/ ditch the colon\n                            json.Read();\n                            \n                            \/\/ value\n                            table [name] = ParseValue();\n                            break;\n                    }\n                }\n            }\n            \n            List<object> ParseArray()\n            {\n                List<object> array = new List<object>();\n                \n                \/\/ ditch opening bracket\n                json.Read();\n                \n                \/\/ [\n                var parsing = true;\n                while (parsing)\n                {\n                    TOKEN nextToken = NextToken;\n                    \n                    switch (nextToken)\n                    {\n                        case TOKEN.NONE:\n                            return null;\n                        case TOKEN.COMMA:\n                            continue;\n                        case TOKEN.SQUARED_CLOSE:\n                            parsing = false;\n                            break;\n                        default:\n                            object value = ParseByToken(nextToken);\n                            \n                            array.Add(value);\n                            break;\n                    }\n                }\n                \n                return array;\n            }\n\n            internal List<object> ParseArrayOnly()\n            {\n                String wholeArray = json.ReadToEnd().TrimEnd(new char[]\n                {\n                    ']',\n                    ' '\n                });\n                List<object> array = new List<object>();\n                int lvl = 0, start = 0;\n\n                for (int i = 0; i < wholeArray.Length; i++)\n                {\n                    char currChar = wholeArray [i];\n                    if (currChar == '{')\n                    {\n                        lvl++;\n                        if (lvl == 1)\n                        {\n                            start = i;\n                        }\n                    } else if (currChar == '}')\n                    {\n                        lvl--;\n                        if (lvl == 0)\n                        {\n                            array.Add(wholeArray.Substring(start, i - start + 1));\n                        }\n                    }\n                }\n                \n                return array;\n            }\n\n            object ParseValue()\n            {\n                TOKEN nextToken = NextToken;\n                return ParseByToken(nextToken);\n            }\n            \n            object ParseByToken(TOKEN token)\n            {\n                switch (token)\n                {\n                    case TOKEN.STRING:\n                        return ParseString();\n                    case TOKEN.NUMBER:\n                        return ParseNumber();\n                    case TOKEN.CURLY_OPEN:\n                        return ParseObject();\n                    case TOKEN.SQUARED_OPEN:\n                        return ParseArray();\n                    case TOKEN.TRUE:\n                        return true;\n                    case TOKEN.FALSE:\n                        return false;\n                    case TOKEN.NULL:\n                        return null;\n                    default:\n                        return null;\n                }\n            }\n            \n            string ParseString()\n            {\n                StringBuilder s = new StringBuilder();\n                char c;\n                \n                \/\/ ditch opening quote\n                json.Read();\n                \n                bool parsing = true;\n                while (parsing)\n                {\n                    \n                    if (json.Peek() == -1)\n                    {\n                        parsing = false;\n                        break;\n                    }\n                    \n                    c = NextChar;\n                    switch (c)\n                    {\n                        case '\"':\n                            parsing = false;\n                            break;\n                        case '\\\\':\n                            if (json.Peek() == -1)\n                            {\n                                parsing = false;\n                                break;\n                            }\n                            \n                            c = NextChar;\n                            switch (c)\n                            {\n                                case '\"':\n                                case '\\\\':\n                                case '\/':\n                                    s.Append(c);\n                                    break;\n                                case 'b':\n                                    s.Append('\\b');\n                                    break;\n                                case 'f':\n                                    s.Append('\\f');\n                                    break;\n                                case 'n':\n                                    s.Append('\\n');\n                                    break;\n                                case 'r':\n                                    s.Append('\\r');\n                                    break;\n                                case 't':\n                                    s.Append('\\t');\n                                    break;\n                                case 'u':\n                                    var hex = new char[4];\n                                    \n                                    for (int i=0; i< 4; i++)\n                                    {\n                                        hex [i] = NextChar;\n                                    }\n                                    \n                                    s.Append((char)Convert.ToInt32(new string(hex), 16));\n                                    break;\n                            }\n                            break;\n                        default:\n                            s.Append(c);\n                            break;\n                    }\n                }\n                \n                return s.ToString();\n            }\n            \n            object ParseNumber()\n            {\n                string number = NextWord;\n                \n                if (number.IndexOf('.') == -1)\n                {\n                    long parsedInt;\n                    Int64.TryParse(number, out parsedInt);\n                    return parsedInt;\n                }\n                \n                double parsedDouble;\n                Double.TryParse(number, out parsedDouble);\n                return parsedDouble;\n            }\n            \n            void EatWhitespace()\n            {\n                while (Char.IsWhiteSpace(PeekChar))\n                {\n                    json.Read();\n                    \n                    if (json.Peek() == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n            \n            char PeekChar\n            {\n                get\n                {\n                    return Convert.ToChar(json.Peek());\n                }\n            }\n            \n            char NextChar\n            {\n                get\n                {\n                    return Convert.ToChar(json.Read());\n                }\n            }\n            \n            string NextWord\n            {\n                get\n                {\n                    StringBuilder word = new StringBuilder();\n                    \n                    while (!IsWordBreak(PeekChar))\n                    {\n                        word.Append(NextChar);\n                        \n                        if (json.Peek() == -1)\n                        {\n                            break;\n                        }\n                    }\n                    \n                    return word.ToString();\n                }\n            }\n            \n            TOKEN NextToken\n            {\n                get\n                {\n                    EatWhitespace();\n                    \n                    if (json.Peek() == -1)\n                    {\n                        return TOKEN.NONE;\n                    }\n                    \n                    switch (PeekChar)\n                    {\n                        case '{':\n                            return TOKEN.CURLY_OPEN;\n                        case '}':\n                            json.Read();\n                            return TOKEN.CURLY_CLOSE;\n                        case '[':\n                            return TOKEN.SQUARED_OPEN;\n                        case ']':\n                            json.Read();\n                            return TOKEN.SQUARED_CLOSE;\n                        case ',':\n                            json.Read();\n                            return TOKEN.COMMA;\n                        case '\"':\n                            return TOKEN.STRING;\n                        case ':':\n                            return TOKEN.COLON;\n                        case '0':\n                        case '1':\n                        case '2':\n                        case '3':\n                        case '4':\n                        case '5':\n                        case '6':\n                        case '7':\n                        case '8':\n                        case '9':\n                        case '-':\n                            return TOKEN.NUMBER;\n                    }\n                    \n                    switch (NextWord)\n                    {\n                        case \"false\":\n                            return TOKEN.FALSE;\n                        case \"true\":\n                            return TOKEN.TRUE;\n                        case \"null\":\n                            return TOKEN.NULL;\n                    }\n                    \n                    return TOKEN.NONE;\n                }\n            }\n        }\n        \n        \/\/\/ <summary>\n        \/\/\/ Converts a IDictionary \/ IList object or a simple type (string, int, etc.) into a JSON string\n        \/\/\/ <\/summary>\n        \/\/\/ <param name=\"json\">A Dictionary&lt;string, object&gt; \/ List&lt;object&gt;<\/param>\n        \/\/\/ <returns>A JSON encoded string, or null if object 'json' is not serializable<\/returns>\n        public static string Serialize(object obj)\n        {\n            return Serializer.Serialize(obj);\n        }\n        \n        sealed class Serializer\n        {\n            StringBuilder builder;\n            \n            Serializer()\n            {\n                builder = new StringBuilder();\n            }\n            \n            public static string Serialize(object obj)\n            {\n                var instance = new Serializer();\n                \n                instance.SerializeValue(obj);\n                \n                return instance.builder.ToString();\n            }\n            \n            void SerializeValue(object value)\n            {\n                IList asList;\n                IDictionary asDict;\n                string asStr;\n                \n                if (value == null)\n                {\n                    builder.Append(\"null\");\n                } else if ((asStr = value as string) != null)\n                {\n                    SerializeString(asStr);\n                } else if (value is bool)\n                {\n                    builder.Append((bool)value ? \"true\" : \"false\");\n                } else if ((asList = value as IList) != null)\n                {\n                    SerializeArray(asList);\n                } else if ((asDict = value as IDictionary) != null)\n                {\n                    SerializeObject(asDict);\n                } else if (value is char)\n                {\n                    SerializeString(new string((char)value, 1));\n                } else\n                {\n                    SerializeOther(value);\n                }\n            }\n            \n            void SerializeObject(IDictionary obj)\n            {\n                bool first = true;\n                \n                builder.Append('{');\n                \n                foreach (object e in obj.Keys)\n                {\n                    if (!first)\n                    {\n                        builder.Append(',');\n                    }\n                    \n                    SerializeString(e.ToString());\n                    builder.Append(':');\n                    \n                    SerializeValue(obj [e]);\n                    \n                    first = false;\n                }\n                \n                builder.Append('}');\n            }\n            \n            void SerializeArray(IList anArray)\n            {\n                builder.Append('[');\n                \n                bool first = true;\n                \n                foreach (object obj in anArray)\n                {\n                    if (!first)\n                    {\n                        builder.Append(',');\n                    }\n                    \n                    SerializeValue(obj);\n                    \n                    first = false;\n                }\n                \n                builder.Append(']');\n            }\n            \n            void SerializeString(string str)\n            {\n                builder.Append('\\\"');\n                \n                char[] charArray = str.ToCharArray();\n                foreach (var c in charArray)\n                {\n                    switch (c)\n                    {\n                        case '\"':\n                            builder.Append(\"\\\\\\\"\");\n                            break;\n                        case '\\\\':\n                            builder.Append(\"\\\\\\\\\");\n                            break;\n                        case '\\b':\n                            builder.Append(\"\\\\b\");\n                            break;\n                        case '\\f':\n                            builder.Append(\"\\\\f\");\n                            break;\n                        case '\\n':\n                            builder.Append(\"\\\\n\");\n                            break;\n                        case '\\r':\n                            builder.Append(\"\\\\r\");\n                            break;\n                        case '\\t':\n                            builder.Append(\"\\\\t\");\n                            break;\n                        default:\n                            int codepoint = Convert.ToInt32(c);\n                            if ((codepoint >= 32) && (codepoint <= 126))\n                            {\n                                builder.Append(c);\n                            } else\n                            {\n                                builder.Append(\"\\\\u\");\n                                builder.Append(codepoint.ToString(\"x4\"));\n                            }\n                            break;\n                    }\n                }\n                \n                builder.Append('\\\"');\n            }\n            \n            void SerializeOther(object value)\n            {\n                \/\/ NOTE: decimals lose precision during serialization.\n                \/\/ They always have, I'm just letting you know.\n                \/\/ Previously floats and doubles lost precision too.\n                if (value is float)\n                {\n                    builder.Append(((float)value).ToString(\"R\"));\n                } else if (value is int\n                    || value is uint\n                    || value is long\n                    || value is sbyte\n                    || value is byte\n                    || value is short\n                    || value is ushort\n                    || value is ulong)\n                {\n                    builder.Append(value);\n                } else if (value is double\n                    || value is decimal)\n                {\n                    builder.Append(Convert.ToDouble(value).ToString(\"R\"));\n                } else\n                {\n                    SerializeString(value.ToString());\n                }\n            }\n        }\n    }\n"}}
