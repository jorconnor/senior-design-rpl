{"cs.classes":{"pos":1,"subs":[{"cs.classdef":{"pos":1476,"subs":[{"cs.classname":{"pos":1489,"text":"VssBadStateException"}},{"cs.parentclasslist":{"pos":1512,"subs":[{"cs.parentclass":{"pos":1512,"text":"VssException"}}],"text":"VssException"}}],"text":"public class VssBadStateException : VssException\n   {"}},{"cs.classdef":{"pos":5143,"subs":[{"cs.classname":{"pos":5156,"text":"AnonymousFunctionsTest"}}],"text":"public class AnonymousFunctionsTest\n    {"}},{"cs.classdef":{"pos":6130,"subs":[{"cs.classname":{"pos":6143,"text":"Animal"}},{"cs.parentclasslist":{"pos":6152,"subs":[{"cs.parentclass":{"pos":6152,"text":"IComparable"}},{"cs.parentclass":{"pos":6165,"text":"IComparable<Animal>"}}],"text":"IComparable, IComparable<Animal>"}}],"text":"public class Animal : IComparable, IComparable<Animal>\n    {"}},{"cs.classdef":{"pos":6674,"subs":[{"cs.classname":{"pos":6682,"text":"Auto"}}],"text":"\n\nclass Auto\n    {"}},{"cs.classdef":{"pos":6809,"subs":[{"cs.classname":{"pos":6829,"text":"ExtendingLinq"}}],"text":"public static class ExtendingLinq\n    {"}},{"cs.classdef":{"pos":6985,"subs":[{"cs.classname":{"pos":7002,"text":"IAnimal"}}],"text":"public interface IAnimal\n    {"}},{"cs.classdef":{"pos":7080,"subs":[{"cs.classname":{"pos":7095,"text":"Unsubscriber<T>"}},{"cs.parentclasslist":{"pos":7113,"subs":[{"cs.parentclass":{"pos":7113,"text":"IDisposable"}}],"text":"IDisposable"}}],"text":"internal class Unsubscriber<T> : IDisposable\n    {"}}],"text":"\/* Copyright (c) 2008-2016 Peter Palotas\n *  \n *  Permisssion is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *  \n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *  \n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n *\/\nusing System;\nusing System.Runtime.Serialization;\nusing static System.Math; \nusing Array = System.Collections.ArrayList;\n\nnamespace Alphaleonis.Win32.Vss\n{\n   \/\/\/ <summary>\n   \/\/\/ Exception class indicating that the vss object referenced was not in a correct state for the requested operation.\n   \/\/\/ <\/summary>\n   [Serializable]\n   public class VssBadStateException : VssException\n   {\n      \/\/\/ <summary>\n      \/\/\/ Initializes a new instance of the <see cref=\"VssBadStateException\"\/> class.\n      \/\/\/ <\/summary>\n      public VssBadStateException() \/\/Inline comment to catch`\n         : base(Resources.LocalizedStrings.TheVSSObjectWasInAnIncorrectStateForTheRequestedOperation)\n      {\n      }\/*This is an allowed block comment *\/\n\n      \/\/\/ <summary>\n      \/\/\/ Initializes a new instance of the <see cref=\"VssBadStateException\"\/> class with the specified error message.\n      \/\/\/ <\/summary>\n      \/\/\/ <param name=\"message\">The error message.<\/param>\n      public VssBadStateException(string message)\n         : base(message) \/* This is another allowed block \n         comment *\/\n      {\n      }\n\n      \/\/\/ <summary>\n      \/\/\/ Initializes a new instance of the <see cref=\"VssBadStateException\"\/> class with the specified error message\n      \/\/\/ and a reference to the inner exception that is the cause of this exception.\n      \/\/\/ <\/summary>\n      \/\/\/ <param name=\"message\">The error message.<\/param>\n      \/\/\/ <param name=\"innerException\">The inner exception.<\/param>\n      public VssBadStateException(string message, Exception innerException)\n         : base(message, innerException)\n      {\n      }\n\n      \/\/\/ <summary>\n      \/\/\/ Initializes a new instance of the <see cref=\"VssBadStateException\"\/> class with serialized data.\n      \/\/\/ <\/summary>\n      \/\/\/ <param name=\"info\">The <see cref=\"T:System.Runtime.Serialization.SerializationInfo\"\/> that holds the serialized object data about the exception being thrown.<\/param>\n      \/\/\/ <param name=\"context\">The <see cref=\"T:System.Runtime.Serialization.StreamingContext\"\/> that contains contextual information about the source or destination.<\/param>\n      \/\/\/ <exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"info\"\/> parameter is <see langword=\"null\"\/>. <\/exception>\n      \/\/\/ <exception cref=\"T:System.Runtime.Serialization.SerializationException\">The class name is <see langword=\"null\"\/> or <see cref=\"P:System.Exception.HResult\"\/> is zero (0). <\/exception>\n      protected VssBadStateException(SerializationInfo info, StreamingContext context)\n         : base(info, context)\n      {\n      }\n   }\n\n\n  \/\/ ************************************************************************************************\n  \/\/ The MIT License (MIT)\n  \/\/ \n  \/\/ Copyright (c) 2015 Marek Kawa (masterkawaster)\n  \/\/ \n  \/\/ Permission is hereby granted, free of charge, to any person obtaining a copy\n  \/\/ of this software and associated documentation files (the \"Software\"), to deal\n  \/\/ in the Software without restriction, including without limitation the rights\n  \/\/ to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n  \/\/ copies of the Software, and to permit persons to whom the Software is\n  \/\/ furnished to do so, subject to the following conditions:\n  \/\/ \n  \/\/ The above copyright notice and this permission notice shall be included in\n  \/\/ all copies or substantial portions of the Software.\n  \/\/ \n  \/\/ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  \/\/ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  \/\/ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  \/\/ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  \/\/ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  \/\/ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  \/\/ THE SOFTWARE.\n  \/\/ ************************************************************************************************\n    [TestFixture]\n    public class AnonymousFunctionsTest\n    {\n        delegate int CalcNumber(int x, int y);\n\n        [Test]\n        public void AnonymousFunctions()\n        {\n            Assert.That(() => { return 4; }, Is.EqualTo(4));\n        }\n\n        [Test]\n        public void InvokeManyTimes()\n        {\n            Func<int> calculateNumber = () => { return 4; };\n            Assert.That(calculateNumber(), Is.EqualTo(4));\n            Assert.That(calculateNumber() * 2, Is.EqualTo(8));\n        }\n\n        [Test]\n        public void WithArguments()\n        {\n            CalcNumber calculateNumber = (x, y) => { return x * y; };\n            Assert.That(calculateNumber(2, 3), Is.EqualTo(6));\n            Assert.That(calculateNumber(7, 8), Is.EqualTo(56));\n        }\n\n        [Test]\n        public void voidDelegateTest()\n        {\n            int number = 2;\n            Action changeNumber = () => number = 4;\n            changeNumber();\n            Assert.That(number, Is.EqualTo(4));\n        }\n}\n\npublic class Animal : IComparable, IComparable<Animal>\n    {\n        private string _animalName;\n        private int _animalWeight;\n\n        public Animal(string animalName, int animalWeight)\n        {\n            this._animalName = animalName;\n            this._animalWeight = animalWeight;\n        }\n\n        public int CompareTo(Animal other)\n        {\n            return this._animalWeight.CompareTo(other._animalWeight);\n        }\n\n        public int CompareTo(object obj)\n        {\n            return CompareTo(obj as Animal);\n        }\n}\n\nclass Auto\n    {\n        private string name;\n\n        public Auto(string name)\n        {\n            this.name = name;\n        }\n}\n\npublic static class ExtendingLinq\n    {\n        public static char Cheers(this IEnumerable<string> collection)\n        {\n            return collection.First()[0];\n        }\n}\n\npublic interface IAnimal\n    {\n        int Weight { get; set; }\n        string MakeSound();\n}\n\ninternal class Unsubscriber<T> : IDisposable\n    {\n        private List<IObserver<T>> _observers;\n        private IObserver<T> _observer;\n\n        internal Unsubscriber(List<IObserver<T>> observers, IObserver<T> observer)\n        {\n            this._observers = observers;\n            this._observer = observer;\n        }\n\n        public void Dispose()\n        {\n            if (_observers.Contains(_observer))\n                _observers.Remove(_observer);\n        }\n}\n}\n"}}
