{
    "go.dependencies": {
        "pos": 1,
        "subs": [
            {
                "go.package": {
                    "pos": 110,
                    "subs": [
                        {
                            "go.package_text": {
                                "pos": 118,
                                "text": "rpc"
                            }
                        }
                    ],
                    "text": "package rpc"
                }
            },
            {
                "go.dependency": {
                    "pos": 123,
                    "subs": [
                        {
                            "go.dependencies_text": {
                                "pos": 131,
                                "text": "math"
                            }
                        }
                    ],
                    "text": "import \"math\""
                }
            },
            {
                "go.dependencies_factor": {
                    "pos": 138,
                    "subs": [
                        {
                            "go.import_list": {
                                "pos": 147,
                                "subs": [
                                    {
                                        "go.dependencies_text": {
                                            "pos": 149,
                                            "text": "container/list"
                                        }
                                    },
                                    {
                                        "go.dependencies_text": {
                                            "pos": 167,
                                            "text": "fmt"
                                        }
                                    },
                                    {
                                        "go.dependencies_text": {
                                            "pos": 174,
                                            "text": "reflect"
                                        }
                                    },
                                    {
                                        "go.dependencies_text": {
                                            "pos": 185,
                                            "text": "sync"
                                        }
                                    }
                                ],
                                "text": "\t\"container/list\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"sync\"\n)"
                            }
                        }
                    ],
                    "text": "import (\n\t\"container/list\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"sync\"\n)"
                }
            },
            {
                "go.dependency": {
                    "pos": 194,
                    "subs": [
                        {
                            "go.dependencies_text": {
                                "pos": 202,
                                "text": "testing"
                            }
                        }
                    ],
                    "text": "import \"testing\""
                }
            }
        ],
        "text": "/* This file is sourced under MIT license from siddontang/go. This is an example\nof block comments in go */\n\npackage rpc\n\nimport \"math\"\n\nimport (\n\t\"container/list\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"sync\"\n)\n\nimport \"testing\"\n\ntype Client struct { // Client struct\n\tsync.Mutex\n\n\tnetwork string\n\taddr    string\n\n\tmaxIdleConns int\n\n\tconns *list.List\n}\n\n// MakeRpc function\nfunc (c *Client) MakeRpc(rpcName string, fptr interface{}) (err error) {\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\terr = fmt.Errorf(\"make rpc error\")\n\t\t}\n\t}()\n\n\tfn := reflect.ValueOf(fptr).Elem()\n\n\tnOut := fn.Type().NumOut()\n\tif nOut == 0 || fn.Type().Out(nOut-1).Kind() != reflect.Interface {\n\t\terr = fmt.Errorf(\"%s return final output param must be error interface\", rpcName)\n\t\treturn\n\t}\n\n\t_, b := fn.Type().Out(nOut - 1).MethodByName(\"Error\")\n\tif !b {\n\t\terr = fmt.Errorf(\"%s return final output param must be error interface\", rpcName)\n\t\treturn\n\t}\n\n\tf := func(in []reflect.Value) []reflect.Value {\n\t\treturn c.call(fn, rpcName, in)\n\t}\n\n\tv := reflect.MakeFunc(fn.Type(), f)\n\tfn.Set(v)\n\n\treturn\n}\n"
    }
}
