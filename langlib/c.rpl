-------------------------------
-- Inline Comments
--
-- Matches in line comments starting with a '//'. Also
-- captures the code preceding the comment on the same line.
--
-- Run: rosie -wholefile c.line_comments <c-source-file>
-- Structure: c.line_comments                      // Parent pattern to extract all comments from file
--                \- c.line_comment                // Matches a single line comment
--                    \- c.line_comment_context    // The code on the line preceding the comment
--                    \- c.line_comment_body       // Matches the whole comment text
--                        \- c.line_comment_text   // The text of the comment
-------------------------------
alias c.line_comment_start= "//"
c.line_comment_text= {!line_end .}*
alias c.line_comment_pre= {!c.line_comment_start !line_end .}*
c.line_comment_context= {!c.line_comment_start !line_end .}*
c.line_comment_body= {c.line_comment_start c.line_comment_text}
c.line_comment= {c.line_comment_context c.line_comment_body}
c.line_comments= {{c.line_comment / c.line_comment_body / c.line_comment_pre} .}*

-------------------------------
-- Block Comments
--
-- Matches block comments. Block comments in c
-- start with /* and end with */
--
-- Run: rosie -wholefile c.block_comments <c-source-file>
-- Structure: c.block_comments                  // Parent pattern to match all block comments
--                \- c.block_comment            // Matches a single block comment
--                    \- c.block_comment_body   // Matches the body of a block comment
-------------------------------

alias c.block_comment_start = "/*"
alias c.block_comment_end = "*/"
alias c.block_comment_pre= {!c.block_comment_start .}*
alias c.block_comment_body_a = {!c.block_comment_end .}*
c.block_comment_body= {!c.block_comment_end .}*
alias c.block_comment_a = { c.block_comment_start c.block_comment_body_a c.block_comment_end}
c.block_comment= {c.block_comment_start c.block_comment_body c.block_comment_end}
c.block_comments= {c.block_comment_pre c.block_comment}*

-------------------------------
-- Dependencies
--
-- Matches dependencies declared with "include" 
--
-- Run: rosie -wholefile c.dependencies <c-source-file>
-- Structure: c.dependencies                  // Parent pattern to match all dependencies in a file
--                \- c.dependency             // Matches a single import
-------------------------------
alias c.include = "#include "
c.header = {{!">" !["]} .}*
alias import_lit = {"<" / ["]} c.header
c.dependency = {c.include import_lit {">" / ["]}}
alias c.dependencies_pre = {!c.include !line_end .}*

c.dependencies = {{c.dependency / c.dependencies_pre} line_end}*

-------------------------------
-- Functions
--
-- Pattern to match function definitions. This does not
-- capture the functions body.
--
-- Run: rosie -wholefile c.functions <c-source-file>
-- Structure: c.functions                       // Parent pattern that matches all function definitions
--                \- c.function                 // Matches an entire function definition
--                    \- c.function_call        // Matches a c function call definition
--                        \- c.static           // Matches if the function call is defined as static
--                        \- c.return_type      // Matches the return type of the function
--                        \- c.pointer          // Matches wether or not the functions return type is a pointer
--                        \- c.function_name    // Matches the functions defined name
--                        \- c.parameters       // Matches the functions list of parameters
--                            \- c.single_param // Matches a single parameter in a function call.
--------------------------------

alias c.seperator = ","
alias c.start_paren = "("
alias c.end_paren = ")"
alias c.start_block = "{"
alias c.end_block = "}"
alias c.whitespace = [:space:]
alias c.pointer = "*"

c.static = "static"
c.return_type = {!line_end .}*
c.function_name = {!line_end !c.start_paren .}*
c.single_param = {!line_end !c.end_paren ![,] .}*
alias c.multip_param =  {[,] c.single_param }*
c.parameters = {c.start_paren c.single_param c.multip_param c.end_paren}

c.function_call =  c.static? c.return_type c.pointer? c.function_name c.parameters
c.function = {c.function_call}
c.functions = {c.function / .}*

-------------------------------
-- Structs
--
-- Pattern to match struct definitions. Does not
-- capture struct bodies.
--
-- Run: rosie -wholefile c.structs <c-source-file>
-- Structure: c.structs                     // Parent pattern that matches all struct definitions
--                \- c.struct_def           // Matches an entire struct definition
--                    \- c.struct_name      // Name of the struct
-------------------------------

alias c.type = "type "
alias c.struct = "struct "
c.struct_name = {!c.struct .}*

c.struct_def = c.type c.struct_name c.struct
c.structs = {c.struct_def / .}*
