--Inline Comments
alias cpp.line_comment_start = "//"
cpp.line_comment_text = {!line_end .}*
alias cpp.line_comment_pre = {!cpp.line_comment_start !line_end .}*
cpp.line_comment_context = {!cpp.line_comment_start !line_end .}*
cpp.line_comment_body = {cpp.line_comment_start cpp.line_comment_text}
cpp.line_comment = {cpp.line_comment_context cpp.line_comment_body}
cpp.line_comments = {{cpp.line_comment / cpp.line_comment_body / cpp.line_comment_pre} .}*

--Block Comments
alias cpp.block_comment_start = "/*"
alias cpp.block_comment_end = "*/"
alias cpp.block_comment_pre = {!cpp.block_comment_start.}*
cpp.block_comment_body = {!cpp.block_comment_end .}*
cpp.block_comment = { cpp.block_comment_start cpp.block_comment_body cpp.block_comment_end}
cpp.block_comments = {cpp.block_comment_pre cpp.block_comment }*

--Dependencies
alias cpp.include = "#include "
cpp.header = {{!">" !["]} .}*
alias import_lit = {"<" / ["]} cpp.header
cpp.dependency = {cpp.include import_lit {">" / ["]}}
alias cpp.dependencies_pre = {!cpp.include !line_end .}*

cpp.dependencies = {{cpp.dependency / cpp.dependencies_pre} line_end}*

-------------------------------
-- Functions
--
-- Pattern to match function definitions. This does not
-- capture the functions body. This is currently the same syntatic definition of a C function.
-- New features of C++ have not yet been accounted for.
--
-- Run: rosie -wholefile cpp.functions <cpp-source-file>
-- Structure: cpp.functions                       // Parent pattern that matches all function definitions
--                \- cpp.function                 // Matches an entire function definition
--                    \- cpp.function_call        // Matches a c function call definition
--                        \- cpp.static           // Matches if the function call is defined as static
--                        \- cpp.return_type      // Matches the return type of the function
--                        \- cpp.pointer          // Matches wether or not the functions return type is a pointer
--                        \- cpp.function_name    // Matches the functions defined name
--                        \- cpp.parameters       // Matches the functions list of parameters
--                            \- cpp.single_param // Matches a single parameter in a function call.
--------------------------------

alias cpp.seperator = ","
alias cpp.start_paren = "("
alias cpp.end_paren = ")"
alias cpp.start_block = "{"
alias cpp.end_block = "}"
alias cpp.whitespace = [:space:]
alias cpp.pointer = "*"
alias cpp.keywords = {"if" / "for" / "switch"}
cpp.static = "static"
cpp.return_type = {!cpp.keywords !cpp.whitespace .}*
cpp.function_name = {!line_end !cpp.start_paren .}*
cpp.single_param = {!line_end !cpp.end_paren ![,] .}*
alias cpp.multip_param =  {[,] cpp.single_param }*
cpp.parameters = {cpp.start_paren cpp.single_param cpp.multip_param cpp.end_paren}

cpp.function_call =  {"\n"} cpp.static? {cpp.return_type} !cpp.keywords cpp.pointer? cpp.function_name cpp.parameters "{"
cpp.function = {cpp.function_call}
cpp.functions = {cpp.function / .}*

cpp.file = {cpp.block_comment / cpp.line_comment / cpp.dependency / .}*